GAS LISTING /tmp/ccs4yEhA.s 			page 1


   1              		.file	"InterruptHandler.cpp"
   2              		.option pic
   3              		.option norelax
   4              		.text
   5              	.Ltext0:
   6              		.align	2
   8              	_ZL14initializationv:
   9              	.LFB24:
  10              		.file 1 "src/InterruptHandler.cpp"
   1:src/InterruptHandler.cpp **** #include "../h/_KernelMemory.h"
   2:src/InterruptHandler.cpp **** #include "../h/_KernelThreadControlBlock.h"
   3:src/InterruptHandler.cpp **** #include "../h/_KernelSemaphore.h"
   4:src/InterruptHandler.cpp **** #include "../h/_KernelScheduler.h"
   5:src/InterruptHandler.cpp **** #include "../h/_KernelConsole.h"
   6:src/InterruptHandler.cpp **** #include "../test/printing.hpp"
   7:src/InterruptHandler.cpp **** 
   8:src/InterruptHandler.cpp **** typedef void (*FP)();
   9:src/InterruptHandler.cpp **** static FP functions[500];
  10:src/InterruptHandler.cpp **** static bool scauseFlag=false;
  11:src/InterruptHandler.cpp **** 
  12:src/InterruptHandler.cpp **** static void initialization();
  13:src/InterruptHandler.cpp **** void mem__alloc();
  14:src/InterruptHandler.cpp **** void mem__free();
  15:src/InterruptHandler.cpp **** void thread__create();
  16:src/InterruptHandler.cpp **** void thread__exit();
  17:src/InterruptHandler.cpp **** void thread__dispatch();
  18:src/InterruptHandler.cpp **** void thread__join();
  19:src/InterruptHandler.cpp **** void sem__open();
  20:src/InterruptHandler.cpp **** void sem__close();
  21:src/InterruptHandler.cpp **** void sem__wait();
  22:src/InterruptHandler.cpp **** void sem__signal();
  23:src/InterruptHandler.cpp **** void time__sleep();
  24:src/InterruptHandler.cpp **** void getc_();
  25:src/InterruptHandler.cpp **** void putc_();
  26:src/InterruptHandler.cpp **** void promena();
  27:src/InterruptHandler.cpp **** 
  28:src/InterruptHandler.cpp **** extern "C" void handle(){
  29:src/InterruptHandler.cpp **** 
  30:src/InterruptHandler.cpp ****     if(functions[0x01]==nullptr){
  31:src/InterruptHandler.cpp ****         initialization();
  32:src/InterruptHandler.cpp ****     }
  33:src/InterruptHandler.cpp **** 
  34:src/InterruptHandler.cpp ****     uint64 volatile prekid;
  35:src/InterruptHandler.cpp ****     __asm__ volatile("csrr %0, scause" : "=r" (prekid));
  36:src/InterruptHandler.cpp **** 
  37:src/InterruptHandler.cpp ****     if(prekid%16>=8 && !(prekid >> 63)){
  38:src/InterruptHandler.cpp ****         __asm__ volatile("csrr x3, sepc");
  39:src/InterruptHandler.cpp ****         __asm__ volatile("addi x3,x3,4");
  40:src/InterruptHandler.cpp ****         __asm__ volatile("csrw sepc, x3");
  41:src/InterruptHandler.cpp ****         uint64 volatile a0;
  42:src/InterruptHandler.cpp ****         __asm__ volatile("mv %0, a0" : "=r" (a0));
  43:src/InterruptHandler.cpp **** 
  44:src/InterruptHandler.cpp ****         functions[a0]();
  45:src/InterruptHandler.cpp ****         __asm__ volatile ("sd a0, 80(s0)");
  46:src/InterruptHandler.cpp ****     }
  47:src/InterruptHandler.cpp ****     else{
  48:src/InterruptHandler.cpp **** 
GAS LISTING /tmp/ccs4yEhA.s 			page 2


  49:src/InterruptHandler.cpp ****         if(prekid == 0x8000000000000001UL){
  50:src/InterruptHandler.cpp ****             uint64 maska = 2;
  51:src/InterruptHandler.cpp ****             Nit::tajmer++;
  52:src/InterruptHandler.cpp ****             Scheduler::dekremntacija(1);
  53:src/InterruptHandler.cpp **** 
  54:src/InterruptHandler.cpp ****             if (Nit::tajmer % (DEFAULT_TIME_SLICE) == 0) {
  55:src/InterruptHandler.cpp ****                 uint64 volatile sepc;
  56:src/InterruptHandler.cpp ****                 uint64 volatile sstatus;
  57:src/InterruptHandler.cpp ****                 __asm__ volatile("csrr %0, sepc" : "=r" (sepc)); // sepc
  58:src/InterruptHandler.cpp ****                 __asm__ volatile("csrr %0, sstatus" : "=r" (sstatus)); // sstatus_r
  59:src/InterruptHandler.cpp ****                 Nit::dispatch();
  60:src/InterruptHandler.cpp ****                 __asm__ volatile("csrw sepc, %0" : : "r" (sepc)); // sepc_w
  61:src/InterruptHandler.cpp ****                 __asm__ volatile("csrw sstatus, %0" : : "r" (sstatus)); // sstatus_w
  62:src/InterruptHandler.cpp ****                 Nit::tajmer = 0;
  63:src/InterruptHandler.cpp ****             }
  64:src/InterruptHandler.cpp ****             __asm__ volatile("csrc sip, %0"::"r" (maska));
  65:src/InterruptHandler.cpp ****         }
  66:src/InterruptHandler.cpp **** 
  67:src/InterruptHandler.cpp ****         else if(prekid == 0x8000000000000009UL){
  68:src/InterruptHandler.cpp ****             int volatile h = plic_claim();
  69:src/InterruptHandler.cpp ****             if(h==CONSOLE_IRQ){
  70:src/InterruptHandler.cpp ****                 while(*(uint8*)CONSOLE_STATUS & CONSOLE_RX_STATUS_BIT){
  71:src/InterruptHandler.cpp ****                     Konzola::putulaz(*(char*)CONSOLE_RX_DATA);
  72:src/InterruptHandler.cpp ****                 }
  73:src/InterruptHandler.cpp ****             }
  74:src/InterruptHandler.cpp ****             plic_complete(CONSOLE_IRQ);
  75:src/InterruptHandler.cpp ****         }
  76:src/InterruptHandler.cpp ****         else if(prekid!=0x8000000000000001UL) {
  77:src/InterruptHandler.cpp ****             if (scauseFlag == false) {
  78:src/InterruptHandler.cpp ****                 printString("BNT: \n");
  79:src/InterruptHandler.cpp ****                 printInt(prekid >> 63);
  80:src/InterruptHandler.cpp ****                 printString("value: \n");
  81:src/InterruptHandler.cpp ****                 printInt(prekid % 16);
  82:src/InterruptHandler.cpp ****                 scauseFlag=true;
  83:src/InterruptHandler.cpp ****             }
  84:src/InterruptHandler.cpp ****         }
  85:src/InterruptHandler.cpp ****     }
  86:src/InterruptHandler.cpp **** }
  87:src/InterruptHandler.cpp **** 
  88:src/InterruptHandler.cpp **** 
  89:src/InterruptHandler.cpp **** 
  90:src/InterruptHandler.cpp **** 
  91:src/InterruptHandler.cpp **** 
  92:src/InterruptHandler.cpp **** static void initialization(){
  11              		.loc 1 92 29
  12              		.cfi_startproc
  13 0000 130101FF 		addi	sp,sp,-16
  14              		.cfi_def_cfa_offset 16
  15 0004 23348100 		sd	s0,8(sp)
  16              		.cfi_offset 8, -8
  17 0008 13040101 		addi	s0,sp,16
  18              		.cfi_def_cfa 8, 0
  93:src/InterruptHandler.cpp ****     functions[0x01] = &mem__alloc;
  19              		.loc 1 93 5
  20              		.loc 1 93 21 is_stmt 0
  21 000c 97070000 		lla	a5,_ZL9functions
  21      93870700 
GAS LISTING /tmp/ccs4yEhA.s 			page 3


  22 0014 17070000 		lla	a4,_Z10mem__allocv
  22      13070700 
  23 001c 23B4E700 		sd	a4,8(a5)
  94:src/InterruptHandler.cpp ****     functions[0x02] = &mem__free;
  24              		.loc 1 94 5 is_stmt 1
  25              		.loc 1 94 21 is_stmt 0
  26 0020 17070000 		lla	a4,_Z9mem__freev
  26      13070700 
  27 0028 23B8E700 		sd	a4,16(a5)
  95:src/InterruptHandler.cpp ****     functions[0x11] = &thread__create;
  28              		.loc 1 95 5 is_stmt 1
  29              		.loc 1 95 21 is_stmt 0
  30 002c 17070000 		lla	a4,_Z14thread__createv
  30      13070700 
  31 0034 23B4E708 		sd	a4,136(a5)
  96:src/InterruptHandler.cpp ****     functions[0x12] = &thread__exit;
  32              		.loc 1 96 5 is_stmt 1
  33              		.loc 1 96 21 is_stmt 0
  34 0038 17070000 		lla	a4,_Z12thread__exitv
  34      13070700 
  35 0040 23B8E708 		sd	a4,144(a5)
  97:src/InterruptHandler.cpp ****     functions[0x13] = &thread__dispatch;
  36              		.loc 1 97 5 is_stmt 1
  37              		.loc 1 97 21 is_stmt 0
  38 0044 17070000 		lla	a4,_Z16thread__dispatchv
  38      13070700 
  39 004c 23BCE708 		sd	a4,152(a5)
  98:src/InterruptHandler.cpp ****     functions[0x14] = &thread__join;
  40              		.loc 1 98 5 is_stmt 1
  41              		.loc 1 98 21 is_stmt 0
  42 0050 17070000 		lla	a4,_Z12thread__joinv
  42      13070700 
  43 0058 23B0E70A 		sd	a4,160(a5)
  99:src/InterruptHandler.cpp ****     functions[0x21] = &sem__open;
  44              		.loc 1 99 5 is_stmt 1
  45              		.loc 1 99 21 is_stmt 0
  46 005c 17070000 		lla	a4,_Z9sem__openv
  46      13070700 
  47 0064 23B4E710 		sd	a4,264(a5)
 100:src/InterruptHandler.cpp ****     functions[0x22] = &sem__close;
  48              		.loc 1 100 5 is_stmt 1
  49              		.loc 1 100 21 is_stmt 0
  50 0068 17070000 		lla	a4,_Z10sem__closev
  50      13070700 
  51 0070 23B8E710 		sd	a4,272(a5)
 101:src/InterruptHandler.cpp ****     functions[0x23] = &sem__wait;
  52              		.loc 1 101 5 is_stmt 1
  53              		.loc 1 101 21 is_stmt 0
  54 0074 17070000 		lla	a4,_Z9sem__waitv
  54      13070700 
  55 007c 23BCE710 		sd	a4,280(a5)
 102:src/InterruptHandler.cpp ****     functions[0x24] = &sem__signal;
  56              		.loc 1 102 5 is_stmt 1
  57              		.loc 1 102 21 is_stmt 0
  58 0080 17070000 		lla	a4,_Z11sem__signalv
  58      13070700 
  59 0088 23B0E712 		sd	a4,288(a5)
GAS LISTING /tmp/ccs4yEhA.s 			page 4


 103:src/InterruptHandler.cpp ****     functions[0x31] = &time__sleep;
  60              		.loc 1 103 5 is_stmt 1
  61              		.loc 1 103 21 is_stmt 0
  62 008c 17070000 		lla	a4,_Z11time__sleepv
  62      13070700 
  63 0094 23B4E718 		sd	a4,392(a5)
 104:src/InterruptHandler.cpp ****     functions[0x41] = &getc_;
  64              		.loc 1 104 5 is_stmt 1
  65              		.loc 1 104 21 is_stmt 0
  66 0098 17070000 		lla	a4,_Z5getc_v
  66      13070700 
  67 00a0 23B4E720 		sd	a4,520(a5)
 105:src/InterruptHandler.cpp ****     functions[0x42] = &putc_;
  68              		.loc 1 105 5 is_stmt 1
  69              		.loc 1 105 21 is_stmt 0
  70 00a4 17070000 		lla	a4,_Z5putc_v
  70      13070700 
  71 00ac 23B8E720 		sd	a4,528(a5)
 106:src/InterruptHandler.cpp ****     functions[0x70] = &promena;
  72              		.loc 1 106 5 is_stmt 1
  73              		.loc 1 106 21 is_stmt 0
  74 00b0 17070000 		lla	a4,_Z7promenav
  74      13070700 
  75 00b8 23B0E738 		sd	a4,896(a5)
 107:src/InterruptHandler.cpp **** }
  76              		.loc 1 107 1
  77 00bc 03348100 		ld	s0,8(sp)
  78              		.cfi_restore 8
  79              		.cfi_def_cfa 2, 16
  80 00c0 13010101 		addi	sp,sp,16
  81              		.cfi_def_cfa_offset 0
  82 00c4 67800000 		jr	ra
  83              		.cfi_endproc
  84              	.LFE24:
  86              		.align	2
  87              		.globl	_Z7promenav
  89              	_Z7promenav:
  90              	.LFB38:
 108:src/InterruptHandler.cpp **** 
 109:src/InterruptHandler.cpp **** void mem__alloc(){
 110:src/InterruptHandler.cpp ****     uint64 size;
 111:src/InterruptHandler.cpp ****     __asm__ volatile ("mv %0, a1" : "=r" (size));
 112:src/InterruptHandler.cpp ****     Memorija::alokacija(size);
 113:src/InterruptHandler.cpp **** }
 114:src/InterruptHandler.cpp **** void mem__free(){
 115:src/InterruptHandler.cpp ****     void *size;
 116:src/InterruptHandler.cpp ****     __asm__ volatile ("mv %0, a1" : "=r" (size));
 117:src/InterruptHandler.cpp ****     Memorija::oslobadjanje(size);
 118:src/InterruptHandler.cpp **** }
 119:src/InterruptHandler.cpp **** void thread__create(){
 120:src/InterruptHandler.cpp ****     void* volatile arg;
 121:src/InterruptHandler.cpp ****     void(*start_routine)(void*);
 122:src/InterruptHandler.cpp ****     Nit** volatile handle;
 123:src/InterruptHandler.cpp **** 
 124:src/InterruptHandler.cpp ****     __asm__ volatile ("mv %0, a3" : "=r" (arg));
 125:src/InterruptHandler.cpp ****     __asm__ volatile ("mv %0, a2" : "=r" (start_routine));
 126:src/InterruptHandler.cpp ****     __asm__ volatile ("mv %0, a1" : "=r" (handle));
GAS LISTING /tmp/ccs4yEhA.s 			page 5


 127:src/InterruptHandler.cpp **** 
 128:src/InterruptHandler.cpp ****     *handle = Nit::konstruktor(start_routine,arg);
 129:src/InterruptHandler.cpp **** 
 130:src/InterruptHandler.cpp ****     if(*handle==nullptr) {
 131:src/InterruptHandler.cpp ****         uint64 volatile a0=-2;
 132:src/InterruptHandler.cpp ****         __asm__ volatile ("mv a0, %0" : : "r" (a0));
 133:src/InterruptHandler.cpp ****     }
 134:src/InterruptHandler.cpp **** 
 135:src/InterruptHandler.cpp **** }
 136:src/InterruptHandler.cpp **** void thread__exit(){
 137:src/InterruptHandler.cpp ****     Nit::running->finished=true;
 138:src/InterruptHandler.cpp ****     Nit::dispatch();
 139:src/InterruptHandler.cpp **** }
 140:src/InterruptHandler.cpp **** void thread__dispatch(){
 141:src/InterruptHandler.cpp ****     uint64 volatile sepc;
 142:src/InterruptHandler.cpp ****     uint64 volatile sstatus;
 143:src/InterruptHandler.cpp ****     __asm__ volatile("csrr %0, sepc" : "=r" (sepc)); // sepc
 144:src/InterruptHandler.cpp ****     __asm__ volatile("csrr %0, sstatus" : "=r" (sstatus)); // sstatus_r
 145:src/InterruptHandler.cpp ****     Nit::dispatch();
 146:src/InterruptHandler.cpp ****     __asm__ volatile("csrw sepc, %0" : : "r" (sepc)); // sepc_w
 147:src/InterruptHandler.cpp ****     __asm__ volatile("csrw sstatus, %0" : : "r" (sstatus)); // sstatus_w
 148:src/InterruptHandler.cpp **** }
 149:src/InterruptHandler.cpp **** void thread__join(){
 150:src/InterruptHandler.cpp ****     Nit *volatile thread;
 151:src/InterruptHandler.cpp ****     __asm__ volatile ("mv %0, a1" : "=r" (thread));
 152:src/InterruptHandler.cpp **** 
 153:src/InterruptHandler.cpp ****     if(thread!=nullptr && !thread->finished){
 154:src/InterruptHandler.cpp ****         uint64 volatile sepc;
 155:src/InterruptHandler.cpp ****         uint64 volatile sstatus;
 156:src/InterruptHandler.cpp ****         __asm__ volatile("csrr %0, sepc" : "=r" (sepc)); // sepc
 157:src/InterruptHandler.cpp ****         __asm__ volatile("csrr %0, sstatus" : "=r" (sstatus)); // sstatus_r
 158:src/InterruptHandler.cpp ****         thread->join();
 159:src/InterruptHandler.cpp ****         __asm__ volatile("csrw sepc, %0" : : "r" (sepc)); // sepc_w
 160:src/InterruptHandler.cpp ****         __asm__ volatile("csrw sstatus, %0" : : "r" (sstatus)); // sstatus_w
 161:src/InterruptHandler.cpp ****     }
 162:src/InterruptHandler.cpp **** }
 163:src/InterruptHandler.cpp **** void sem__open(){
 164:src/InterruptHandler.cpp ****     Semafor** volatile handle;
 165:src/InterruptHandler.cpp ****     unsigned volatile val;
 166:src/InterruptHandler.cpp **** 
 167:src/InterruptHandler.cpp ****     __asm__ volatile ("mv %0, a2" : "=r" (val));
 168:src/InterruptHandler.cpp ****     __asm__ volatile ("mv %0, a1" : "=r" (handle));
 169:src/InterruptHandler.cpp ****     *handle = new Semafor(val);
 170:src/InterruptHandler.cpp ****     if(*handle==nullptr) {
 171:src/InterruptHandler.cpp ****         uint64 volatile a0=-2;
 172:src/InterruptHandler.cpp ****         __asm__ volatile ("mv a0, %0" : : "r" (a0));
 173:src/InterruptHandler.cpp ****     }
 174:src/InterruptHandler.cpp **** }
 175:src/InterruptHandler.cpp **** void sem__close(){
 176:src/InterruptHandler.cpp ****     Semafor* volatile id;
 177:src/InterruptHandler.cpp ****     __asm__ volatile ("mv %0, a1" : "=r" (id));
 178:src/InterruptHandler.cpp **** 
 179:src/InterruptHandler.cpp ****     id->close();
 180:src/InterruptHandler.cpp **** 
 181:src/InterruptHandler.cpp ****     int a0=0;
 182:src/InterruptHandler.cpp ****     __asm__ volatile ("mv a0, %0" : : "r" (a0));
 183:src/InterruptHandler.cpp **** }
GAS LISTING /tmp/ccs4yEhA.s 			page 6


 184:src/InterruptHandler.cpp **** void sem__wait(){
 185:src/InterruptHandler.cpp ****     Semafor* volatile id;
 186:src/InterruptHandler.cpp ****     __asm__ volatile ("mv %0, a1" : "=r" (id));
 187:src/InterruptHandler.cpp ****     //if(id==nullptr) print("asd\n");
 188:src/InterruptHandler.cpp ****     int volatile a0;
 189:src/InterruptHandler.cpp **** 
 190:src/InterruptHandler.cpp ****     a0=id->wait();
 191:src/InterruptHandler.cpp **** 
 192:src/InterruptHandler.cpp ****     uint64 volatile sepc;
 193:src/InterruptHandler.cpp ****     uint64 volatile sstatus;
 194:src/InterruptHandler.cpp ****     __asm__ volatile("csrr %0, sepc" : "=r" (sepc)); // sepc
 195:src/InterruptHandler.cpp ****     __asm__ volatile("csrr %0, sstatus" : "=r" (sstatus)); // sstatus_r
 196:src/InterruptHandler.cpp ****     Nit::dispatch();
 197:src/InterruptHandler.cpp ****     __asm__ volatile("csrw sepc, %0" : : "r" (sepc)); // sepc_w
 198:src/InterruptHandler.cpp ****     __asm__ volatile("csrw sstatus, %0" : : "r" (sstatus)); // sstatus_w
 199:src/InterruptHandler.cpp **** 
 200:src/InterruptHandler.cpp ****     a0=Nit::running->prekid;
 201:src/InterruptHandler.cpp ****     __asm__ volatile ("mv a0, %0" : : "r" (a0));
 202:src/InterruptHandler.cpp **** }
 203:src/InterruptHandler.cpp **** void sem__signal(){
 204:src/InterruptHandler.cpp ****     Semafor* volatile id;
 205:src/InterruptHandler.cpp ****     __asm__ volatile ("mv %0, a1" : "=r" (id));
 206:src/InterruptHandler.cpp ****     id->signal();
 207:src/InterruptHandler.cpp **** }
 208:src/InterruptHandler.cpp **** void time__sleep(){
 209:src/InterruptHandler.cpp ****     time_t t;
 210:src/InterruptHandler.cpp ****     __asm__ volatile ("mv %0, a1" : "=r" (t));
 211:src/InterruptHandler.cpp ****     Scheduler::threadsleep(t);
 212:src/InterruptHandler.cpp **** }
 213:src/InterruptHandler.cpp **** void getc_(){
 214:src/InterruptHandler.cpp ****     uint64 volatile sepc;
 215:src/InterruptHandler.cpp ****     uint64 volatile sstatus;
 216:src/InterruptHandler.cpp ****     __asm__ volatile("csrr %0, sepc" : "=r" (sepc)); // sepc
 217:src/InterruptHandler.cpp ****     __asm__ volatile("csrr %0, sstatus" : "=r" (sstatus)); // sstatus_r
 218:src/InterruptHandler.cpp **** 
 219:src/InterruptHandler.cpp ****     Konzola::getulaz();
 220:src/InterruptHandler.cpp ****     __asm__ volatile("sd a0, 80(s0)");
 221:src/InterruptHandler.cpp **** 
 222:src/InterruptHandler.cpp ****     __asm__ volatile("csrw sepc, %0" : : "r" (sepc)); // sepc_w
 223:src/InterruptHandler.cpp ****     __asm__ volatile("csrw sstatus, %0" : : "r" (sstatus)); // sstatus_w
 224:src/InterruptHandler.cpp **** }
 225:src/InterruptHandler.cpp **** void putc_(){
 226:src/InterruptHandler.cpp ****     char volatile c;
 227:src/InterruptHandler.cpp ****     uint64 volatile sepc;
 228:src/InterruptHandler.cpp ****     uint64 volatile sstatus;
 229:src/InterruptHandler.cpp ****     __asm__ volatile ("mv %0, a1" : "=r" (c));
 230:src/InterruptHandler.cpp ****     __asm__ volatile("csrr %0, sepc" : "=r" (sepc)); // sepc
 231:src/InterruptHandler.cpp ****     __asm__ volatile("csrr %0, sstatus" : "=r" (sstatus)); // sstatus_r
 232:src/InterruptHandler.cpp **** 
 233:src/InterruptHandler.cpp ****     //PUTIZLAZ TREBA
 234:src/InterruptHandler.cpp ****     Konzola::putizlaz(c);
 235:src/InterruptHandler.cpp **** 
 236:src/InterruptHandler.cpp ****     __asm__ volatile("csrw sepc, %0" : : "r" (sepc)); // sepc_w
 237:src/InterruptHandler.cpp ****     __asm__ volatile("csrw sstatus, %0" : : "r" (sstatus)); // sstatus_w
 238:src/InterruptHandler.cpp **** }
 239:src/InterruptHandler.cpp **** void promena(){
  91              		.loc 1 239 15 is_stmt 1
GAS LISTING /tmp/ccs4yEhA.s 			page 7


  92              		.cfi_startproc
  93 00c8 130101FE 		addi	sp,sp,-32
  94              		.cfi_def_cfa_offset 32
  95 00cc 233C8100 		sd	s0,24(sp)
  96              		.cfi_offset 8, -8
  97 00d0 13040102 		addi	s0,sp,32
  98              		.cfi_def_cfa 8, 0
 240:src/InterruptHandler.cpp ****     uint64 volatile sstatus;
  99              		.loc 1 240 5
 241:src/InterruptHandler.cpp ****     __asm__ volatile("csrr %0, sstatus" : "=r" (sstatus));
 100              		.loc 1 241 5
 101              		.loc 1 241 58 is_stmt 0
 102              	#APP
 103              	# 241 "src/InterruptHandler.cpp" 1
 242              	    sstatus|=256;
 104              		csrr a5, sstatus
 105              	# 0 "" 2
 106              	#NO_APP
 107 00d8 2334F4FE 		sd	a5,-24(s0)
 108              		.loc 1 242 5 is_stmt 1
 109              		.loc 1 242 12 is_stmt 0
 110 00dc 833784FE 		ld	a5,-24(s0)
 111 00e0 93E70710 		ori	a5,a5,256
 112 00e4 2334F4FE 		sd	a5,-24(s0)
 243:src/InterruptHandler.cpp ****     __asm__ volatile("csrw sstatus, %0"::"r" (sstatus));
 113              		.loc 1 243 5 is_stmt 1
 114              		.loc 1 243 47 is_stmt 0
 115 00e8 833784FE 		ld	a5,-24(s0)
 116              		.loc 1 243 56
 117              	#APP
 118              	# 243 "src/InterruptHandler.cpp" 1
 244              	}...
 119              		csrw sstatus, a5
 120              	# 0 "" 2
 121              		.loc 1 244 1
 122              	#NO_APP
 123 00f0 03348101 		ld	s0,24(sp)
 124              		.cfi_restore 8
 125              		.cfi_def_cfa 2, 32
 126 00f4 13010102 		addi	sp,sp,32
 127              		.cfi_def_cfa_offset 0
 128 00f8 67800000 		jr	ra
 129              		.cfi_endproc
 130              	.LFE38:
 132              		.align	2
 133              		.globl	_Z12thread__exitv
 135              	_Z12thread__exitv:
 136              	.LFB28:
 136:src/InterruptHandler.cpp **** void thread__exit(){
 137              		.loc 1 136 20 is_stmt 1
 138              		.cfi_startproc
 139 00fc 130101FF 		addi	sp,sp,-16
 140              		.cfi_def_cfa_offset 16
 141 0100 23341100 		sd	ra,8(sp)
 142 0104 23308100 		sd	s0,0(sp)
 143              		.cfi_offset 1, -8
 144              		.cfi_offset 8, -16
GAS LISTING /tmp/ccs4yEhA.s 			page 8


 145 0108 13040101 		addi	s0,sp,16
 146              		.cfi_def_cfa 8, 0
 137:src/InterruptHandler.cpp ****     Nit::running->finished=true;
 147              		.loc 1 137 5
 137:src/InterruptHandler.cpp ****     Nit::running->finished=true;
 148              		.loc 1 137 19 is_stmt 0
 149 010c 97070000 		la	a5,_ZN3Nit7runningE
 149      83B70700 
 150 0114 83B70700 		ld	a5,0(a5)
 137:src/InterruptHandler.cpp ****     Nit::running->finished=true;
 151              		.loc 1 137 27
 152 0118 13071000 		li	a4,1
 153 011c 2382E700 		sb	a4,4(a5)
 138:src/InterruptHandler.cpp ****     Nit::dispatch();
 154              		.loc 1 138 5 is_stmt 1
 138:src/InterruptHandler.cpp ****     Nit::dispatch();
 155              		.loc 1 138 18 is_stmt 0
 156 0120 97000000 		call	_ZN3Nit8dispatchEv@plt
 156      E7800000 
 157              	.LVL0:
 139:src/InterruptHandler.cpp **** }
 158              		.loc 1 139 1
 159 0128 83308100 		ld	ra,8(sp)
 160              		.cfi_restore 1
 161 012c 03340100 		ld	s0,0(sp)
 162              		.cfi_restore 8
 163              		.cfi_def_cfa 2, 16
 164 0130 13010101 		addi	sp,sp,16
 165              		.cfi_def_cfa_offset 0
 166 0134 67800000 		jr	ra
 167              		.cfi_endproc
 168              	.LFE28:
 170              		.align	2
 171              		.globl	_Z16thread__dispatchv
 173              	_Z16thread__dispatchv:
 174              	.LFB29:
 140:src/InterruptHandler.cpp **** void thread__dispatch(){
 175              		.loc 1 140 24 is_stmt 1
 176              		.cfi_startproc
 177 0138 130101FE 		addi	sp,sp,-32
 178              		.cfi_def_cfa_offset 32
 179 013c 233C1100 		sd	ra,24(sp)
 180 0140 23388100 		sd	s0,16(sp)
 181              		.cfi_offset 1, -8
 182              		.cfi_offset 8, -16
 183 0144 13040102 		addi	s0,sp,32
 184              		.cfi_def_cfa 8, 0
 141:src/InterruptHandler.cpp ****     uint64 volatile sepc;
 185              		.loc 1 141 5
 142:src/InterruptHandler.cpp ****     uint64 volatile sstatus;
 186              		.loc 1 142 5
 143:src/InterruptHandler.cpp ****     __asm__ volatile("csrr %0, sepc" : "=r" (sepc)); // sepc
 187              		.loc 1 143 5
 143:src/InterruptHandler.cpp ****     __asm__ volatile("csrr %0, sepc" : "=r" (sepc)); // sepc
 188              		.loc 1 143 52 is_stmt 0
 189              	#APP
 190              	# 143 "src/InterruptHandler.cpp" 1
GAS LISTING /tmp/ccs4yEhA.s 			page 9


 191              		csrr a5, sepc
 192              	# 0 "" 2
 193              	#NO_APP
 194 014c 2334F4FE 		sd	a5,-24(s0)
 144:src/InterruptHandler.cpp ****     __asm__ volatile("csrr %0, sstatus" : "=r" (sstatus)); // sstatus_r
 195              		.loc 1 144 5 is_stmt 1
 144:src/InterruptHandler.cpp ****     __asm__ volatile("csrr %0, sstatus" : "=r" (sstatus)); // sstatus_r
 196              		.loc 1 144 58 is_stmt 0
 197              	#APP
 198              	# 144 "src/InterruptHandler.cpp" 1
 199              		csrr a5, sstatus
 200              	# 0 "" 2
 201              	#NO_APP
 202 0154 2330F4FE 		sd	a5,-32(s0)
 145:src/InterruptHandler.cpp ****     Nit::dispatch();
 203              		.loc 1 145 5 is_stmt 1
 145:src/InterruptHandler.cpp ****     Nit::dispatch();
 204              		.loc 1 145 18 is_stmt 0
 205 0158 97000000 		call	_ZN3Nit8dispatchEv@plt
 205      E7800000 
 206              	.LVL1:
 146:src/InterruptHandler.cpp ****     __asm__ volatile("csrw sepc, %0" : : "r" (sepc)); // sepc_w
 207              		.loc 1 146 5 is_stmt 1
 146:src/InterruptHandler.cpp ****     __asm__ volatile("csrw sepc, %0" : : "r" (sepc)); // sepc_w
 208              		.loc 1 146 47 is_stmt 0
 209 0160 833784FE 		ld	a5,-24(s0)
 146:src/InterruptHandler.cpp ****     __asm__ volatile("csrw sepc, %0" : : "r" (sepc)); // sepc_w
 210              		.loc 1 146 53
 211              	#APP
 212              	# 146 "src/InterruptHandler.cpp" 1
 147:src/InterruptHandler.cpp ****     __asm__ volatile("csrw sstatus, %0" : : "r" (sstatus)); // sstatus_w
 213              		csrw sepc, a5
 214              	# 0 "" 2
 215              		.loc 1 147 5 is_stmt 1
 147:src/InterruptHandler.cpp ****     __asm__ volatile("csrw sstatus, %0" : : "r" (sstatus)); // sstatus_w
 216              		.loc 1 147 50 is_stmt 0
 217              	#NO_APP
 218 0168 833704FE 		ld	a5,-32(s0)
 147:src/InterruptHandler.cpp ****     __asm__ volatile("csrw sstatus, %0" : : "r" (sstatus)); // sstatus_w
 219              		.loc 1 147 59
 220              	#APP
 221              	# 147 "src/InterruptHandler.cpp" 1
 148:src/InterruptHandler.cpp **** }
 222              		csrw sstatus, a5
 223              	# 0 "" 2
 224              		.loc 1 148 1
 225              	#NO_APP
 226 0170 83308101 		ld	ra,24(sp)
 227              		.cfi_restore 1
 228 0174 03340101 		ld	s0,16(sp)
 229              		.cfi_restore 8
 230              		.cfi_def_cfa 2, 32
 231 0178 13010102 		addi	sp,sp,32
 232              		.cfi_def_cfa_offset 0
 233 017c 67800000 		jr	ra
 234              		.cfi_endproc
 235              	.LFE29:
GAS LISTING /tmp/ccs4yEhA.s 			page 10


 237              		.align	2
 238              		.globl	_Z10mem__allocv
 240              	_Z10mem__allocv:
 241              	.LFB25:
 109:src/InterruptHandler.cpp **** void mem__alloc(){
 242              		.loc 1 109 18 is_stmt 1
 243              		.cfi_startproc
 244 0180 130101FF 		addi	sp,sp,-16
 245              		.cfi_def_cfa_offset 16
 246 0184 23341100 		sd	ra,8(sp)
 247 0188 23308100 		sd	s0,0(sp)
 248              		.cfi_offset 1, -8
 249              		.cfi_offset 8, -16
 250 018c 13040101 		addi	s0,sp,16
 251              		.cfi_def_cfa 8, 0
 110:src/InterruptHandler.cpp ****     uint64 size;
 252              		.loc 1 110 5
 111:src/InterruptHandler.cpp ****     __asm__ volatile ("mv %0, a1" : "=r" (size));
 253              		.loc 1 111 5
 111:src/InterruptHandler.cpp ****     __asm__ volatile ("mv %0, a1" : "=r" (size));
 254              		.loc 1 111 49 is_stmt 0
 255              	#APP
 256              	# 111 "src/InterruptHandler.cpp" 1
 257              		mv a0, a1
 258              	# 0 "" 2
 259              	.LVL2:
 112:src/InterruptHandler.cpp ****     Memorija::alokacija(size);
 260              		.loc 1 112 5 is_stmt 1
 112:src/InterruptHandler.cpp ****     Memorija::alokacija(size);
 261              		.loc 1 112 24 is_stmt 0
 262              	#NO_APP
 263 0194 97000000 		call	_ZN8Memorija9alokacijaEm@plt
 263      E7800000 
 264              	.LVL3:
 113:src/InterruptHandler.cpp **** }
 265              		.loc 1 113 1
 266 019c 83308100 		ld	ra,8(sp)
 267              		.cfi_restore 1
 268 01a0 03340100 		ld	s0,0(sp)
 269              		.cfi_restore 8
 270              		.cfi_def_cfa 2, 16
 271 01a4 13010101 		addi	sp,sp,16
 272              		.cfi_def_cfa_offset 0
 273 01a8 67800000 		jr	ra
 274              		.cfi_endproc
 275              	.LFE25:
 277              		.align	2
 278              		.globl	_Z9sem__openv
 280              	_Z9sem__openv:
 281              	.LFB31:
 163:src/InterruptHandler.cpp **** void sem__open(){
 282              		.loc 1 163 17 is_stmt 1
 283              		.cfi_startproc
 284 01ac 130101FC 		addi	sp,sp,-64
 285              		.cfi_def_cfa_offset 64
 286 01b0 233C1102 		sd	ra,56(sp)
 287 01b4 23388102 		sd	s0,48(sp)
GAS LISTING /tmp/ccs4yEhA.s 			page 11


 288 01b8 23349102 		sd	s1,40(sp)
 289              		.cfi_offset 1, -8
 290              		.cfi_offset 8, -16
 291              		.cfi_offset 9, -24
 292 01bc 13040104 		addi	s0,sp,64
 293              		.cfi_def_cfa 8, 0
 164:src/InterruptHandler.cpp ****     Semafor** volatile handle;
 294              		.loc 1 164 5
 165:src/InterruptHandler.cpp ****     unsigned volatile val;
 295              		.loc 1 165 5
 167:src/InterruptHandler.cpp ****     __asm__ volatile ("mv %0, a2" : "=r" (val));
 296              		.loc 1 167 5
 167:src/InterruptHandler.cpp ****     __asm__ volatile ("mv %0, a2" : "=r" (val));
 297              		.loc 1 167 48 is_stmt 0
 298              	#APP
 299              	# 167 "src/InterruptHandler.cpp" 1
 300              		mv a5, a2
 301              	# 0 "" 2
 302              	#NO_APP
 303 01c4 232AF4FC 		sw	a5,-44(s0)
 168:src/InterruptHandler.cpp ****     __asm__ volatile ("mv %0, a1" : "=r" (handle));
 304              		.loc 1 168 5 is_stmt 1
 168:src/InterruptHandler.cpp ****     __asm__ volatile ("mv %0, a1" : "=r" (handle));
 305              		.loc 1 168 51 is_stmt 0
 306              	#APP
 307              	# 168 "src/InterruptHandler.cpp" 1
 308              		mv a5, a1
 309              	# 0 "" 2
 310              	#NO_APP
 311 01cc 233CF4FC 		sd	a5,-40(s0)
 169:src/InterruptHandler.cpp ****     *handle = new Semafor(val);
 312              		.loc 1 169 5 is_stmt 1
 169:src/InterruptHandler.cpp ****     *handle = new Semafor(val);
 313              		.loc 1 169 27 is_stmt 0
 314 01d0 832444FD 		lw	s1,-44(s0)
 315 01d4 9B840400 		sext.w	s1,s1
 316              	.LVL4:
 317              	.LBB9:
 318              	.LBB10:
 319              		.file 2 "src/../h/_KernelSemaphore.h"
   1:src/../h/_KernelSemaphore.h **** //
   2:src/../h/_KernelSemaphore.h **** // Created by os on 8/20/22.
   3:src/../h/_KernelSemaphore.h **** //
   4:src/../h/_KernelSemaphore.h **** 
   5:src/../h/_KernelSemaphore.h **** #ifndef PROJECT_BASE_V1_1_SEMAFOR_H
   6:src/../h/_KernelSemaphore.h **** #define PROJECT_BASE_V1_1_SEMAFOR_H
   7:src/../h/_KernelSemaphore.h **** 
   8:src/../h/_KernelSemaphore.h **** #include "_KernelThreadControlBlock.h"
   9:src/../h/_KernelSemaphore.h **** #include "list.h"
  10:src/../h/_KernelSemaphore.h **** 
  11:src/../h/_KernelSemaphore.h **** class Semafor {
  12:src/../h/_KernelSemaphore.h **** private:
  13:src/../h/_KernelSemaphore.h **** 
  14:src/../h/_KernelSemaphore.h ****     int val;
  15:src/../h/_KernelSemaphore.h **** 
  16:src/../h/_KernelSemaphore.h ****     static int idd;
  17:src/../h/_KernelSemaphore.h ****     int id=0;
GAS LISTING /tmp/ccs4yEhA.s 			page 12


  18:src/../h/_KernelSemaphore.h **** 
  19:src/../h/_KernelSemaphore.h ****     struct struktura{
  20:src/../h/_KernelSemaphore.h ****         Nit *t;
  21:src/../h/_KernelSemaphore.h ****         struktura* next;
  22:src/../h/_KernelSemaphore.h ****         int val;
  23:src/../h/_KernelSemaphore.h ****     };
  24:src/../h/_KernelSemaphore.h **** 
  25:src/../h/_KernelSemaphore.h ****     struktura *tail=nullptr;
  26:src/../h/_KernelSemaphore.h ****     struktura *head=nullptr;
  27:src/../h/_KernelSemaphore.h **** public:
  28:src/../h/_KernelSemaphore.h ****     static void *operator new(uint64 n){
  29:src/../h/_KernelSemaphore.h ****         return Memorija::alokacija(n);
 320              		.loc 2 29 9 is_stmt 1
 321              		.loc 2 29 35 is_stmt 0
 322 01d8 13058001 		li	a0,24
 323 01dc 97000000 		call	_ZN8Memorija9alokacijaEm@plt
 323      E7800000 
 324              	.LVL5:
 325              	.LBE10:
 326              	.LBE9:
 327              	.LBB11:
 328              	.LBB12:
  30:src/../h/_KernelSemaphore.h ****     }
  31:src/../h/_KernelSemaphore.h ****     static void *operator new[](uint64 n){
  32:src/../h/_KernelSemaphore.h ****         return Memorija::alokacija(n);
  33:src/../h/_KernelSemaphore.h ****     }
  34:src/../h/_KernelSemaphore.h ****     static void operator delete(void* p){
  35:src/../h/_KernelSemaphore.h ****         Memorija::oslobadjanje(p);
  36:src/../h/_KernelSemaphore.h ****     }
  37:src/../h/_KernelSemaphore.h ****     static void operator delete[](void* p){
  38:src/../h/_KernelSemaphore.h ****         Memorija::oslobadjanje(p);
  39:src/../h/_KernelSemaphore.h ****     }
  40:src/../h/_KernelSemaphore.h **** 
  41:src/../h/_KernelSemaphore.h ****     Semafor(unsigned n=1):val(n){}
 329              		.loc 2 41 32
 330 01e4 23209500 		sw	s1,0(a0)
 331 01e8 23220500 		sw	zero,4(a0)
 332 01ec 23340500 		sd	zero,8(a0)
 333 01f0 23380500 		sd	zero,16(a0)
 334              	.LVL6:
 335              	.LBE12:
 336              	.LBE11:
 169:src/InterruptHandler.cpp ****     *handle = new Semafor(val);
 337              		.loc 1 169 6
 338 01f4 833784FD 		ld	a5,-40(s0)
 169:src/InterruptHandler.cpp ****     *handle = new Semafor(val);
 339              		.loc 1 169 13
 340 01f8 23B0A700 		sd	a0,0(a5)
 170:src/InterruptHandler.cpp ****     if(*handle==nullptr) {
 341              		.loc 1 170 5 is_stmt 1
 342              	.LBB13:
 170:src/InterruptHandler.cpp ****     if(*handle==nullptr) {
 343              		.loc 1 170 9 is_stmt 0
 344 01fc 833784FD 		ld	a5,-40(s0)
 170:src/InterruptHandler.cpp ****     if(*handle==nullptr) {
 345              		.loc 1 170 8
 346 0200 83B70700 		ld	a5,0(a5)
GAS LISTING /tmp/ccs4yEhA.s 			page 13


 170:src/InterruptHandler.cpp ****     if(*handle==nullptr) {
 347              		.loc 1 170 5
 348 0204 638C0700 		beqz	a5,.L14
 349              	.L11:
 350              	.LBE13:
 174:src/InterruptHandler.cpp **** }
 351              		.loc 1 174 1
 352 0208 83308103 		ld	ra,56(sp)
 353              		.cfi_remember_state
 354              		.cfi_restore 1
 355 020c 03340103 		ld	s0,48(sp)
 356              		.cfi_restore 8
 357              		.cfi_def_cfa 2, 64
 358 0210 83348102 		ld	s1,40(sp)
 359              		.cfi_restore 9
 360 0214 13010104 		addi	sp,sp,64
 361              		.cfi_def_cfa_offset 0
 362 0218 67800000 		jr	ra
 363              	.L14:
 364              		.cfi_restore_state
 365              	.LBB15:
 366              	.LBB14:
 171:src/InterruptHandler.cpp ****         uint64 volatile a0=-2;
 367              		.loc 1 171 9 is_stmt 1
 171:src/InterruptHandler.cpp ****         uint64 volatile a0=-2;
 368              		.loc 1 171 25 is_stmt 0
 369 021c 9307E0FF 		li	a5,-2
 370 0220 2334F4FC 		sd	a5,-56(s0)
 172:src/InterruptHandler.cpp ****         __asm__ volatile ("mv a0, %0" : : "r" (a0));
 371              		.loc 1 172 9 is_stmt 1
 172:src/InterruptHandler.cpp ****         __asm__ volatile ("mv a0, %0" : : "r" (a0));
 372              		.loc 1 172 48 is_stmt 0
 373 0224 833784FC 		ld	a5,-56(s0)
 172:src/InterruptHandler.cpp ****         __asm__ volatile ("mv a0, %0" : : "r" (a0));
 374              		.loc 1 172 52
 375              	#APP
 376              	# 172 "src/InterruptHandler.cpp" 1
 377              		mv a0, a5
 378              	# 0 "" 2
 379              	#NO_APP
 380              	.LBE14:
 381              	.LBE15:
 174:src/InterruptHandler.cpp **** }
 382              		.loc 1 174 1
 383 022c 6FF0DFFD 		j	.L11
 384              		.cfi_endproc
 385              	.LFE31:
 387              		.align	2
 388              		.globl	_Z9mem__freev
 390              	_Z9mem__freev:
 391              	.LFB26:
 114:src/InterruptHandler.cpp **** void mem__free(){
 392              		.loc 1 114 17 is_stmt 1
 393              		.cfi_startproc
 394 0230 130101FF 		addi	sp,sp,-16
 395              		.cfi_def_cfa_offset 16
 396 0234 23341100 		sd	ra,8(sp)
GAS LISTING /tmp/ccs4yEhA.s 			page 14


 397 0238 23308100 		sd	s0,0(sp)
 398              		.cfi_offset 1, -8
 399              		.cfi_offset 8, -16
 400 023c 13040101 		addi	s0,sp,16
 401              		.cfi_def_cfa 8, 0
 115:src/InterruptHandler.cpp ****     void *size;
 402              		.loc 1 115 5
 116:src/InterruptHandler.cpp ****     __asm__ volatile ("mv %0, a1" : "=r" (size));
 403              		.loc 1 116 5
 116:src/InterruptHandler.cpp ****     __asm__ volatile ("mv %0, a1" : "=r" (size));
 404              		.loc 1 116 49 is_stmt 0
 405              	#APP
 406              	# 116 "src/InterruptHandler.cpp" 1
 407              		mv a0, a1
 408              	# 0 "" 2
 409              	.LVL7:
 117:src/InterruptHandler.cpp ****     Memorija::oslobadjanje(size);
 410              		.loc 1 117 5 is_stmt 1
 117:src/InterruptHandler.cpp ****     Memorija::oslobadjanje(size);
 411              		.loc 1 117 27 is_stmt 0
 412              	#NO_APP
 413 0244 97000000 		call	_ZN8Memorija12oslobadjanjeEPv@plt
 413      E7800000 
 414              	.LVL8:
 118:src/InterruptHandler.cpp **** }
 415              		.loc 1 118 1
 416 024c 83308100 		ld	ra,8(sp)
 417              		.cfi_restore 1
 418 0250 03340100 		ld	s0,0(sp)
 419              		.cfi_restore 8
 420              		.cfi_def_cfa 2, 16
 421 0254 13010101 		addi	sp,sp,16
 422              		.cfi_def_cfa_offset 0
 423 0258 67800000 		jr	ra
 424              		.cfi_endproc
 425              	.LFE26:
 427              		.align	2
 428              		.globl	_Z14thread__createv
 430              	_Z14thread__createv:
 431              	.LFB27:
 119:src/InterruptHandler.cpp **** void thread__create(){
 432              		.loc 1 119 22 is_stmt 1
 433              		.cfi_startproc
 434 025c 130101FC 		addi	sp,sp,-64
 435              		.cfi_def_cfa_offset 64
 436 0260 233C1102 		sd	ra,56(sp)
 437 0264 23388102 		sd	s0,48(sp)
 438 0268 23349102 		sd	s1,40(sp)
 439              		.cfi_offset 1, -8
 440              		.cfi_offset 8, -16
 441              		.cfi_offset 9, -24
 442 026c 13040104 		addi	s0,sp,64
 443              		.cfi_def_cfa 8, 0
 120:src/InterruptHandler.cpp ****     void* volatile arg;
 444              		.loc 1 120 5
 121:src/InterruptHandler.cpp ****     void(*start_routine)(void*);
 445              		.loc 1 121 5
GAS LISTING /tmp/ccs4yEhA.s 			page 15


 122:src/InterruptHandler.cpp ****     Nit** volatile handle;
 446              		.loc 1 122 5
 124:src/InterruptHandler.cpp ****     __asm__ volatile ("mv %0, a3" : "=r" (arg));
 447              		.loc 1 124 5
 124:src/InterruptHandler.cpp ****     __asm__ volatile ("mv %0, a3" : "=r" (arg));
 448              		.loc 1 124 48 is_stmt 0
 449              	#APP
 450              	# 124 "src/InterruptHandler.cpp" 1
 451              		mv a5, a3
 452              	# 0 "" 2
 453              	#NO_APP
 454 0274 233CF4FC 		sd	a5,-40(s0)
 125:src/InterruptHandler.cpp ****     __asm__ volatile ("mv %0, a2" : "=r" (start_routine));
 455              		.loc 1 125 5 is_stmt 1
 125:src/InterruptHandler.cpp ****     __asm__ volatile ("mv %0, a2" : "=r" (start_routine));
 456              		.loc 1 125 58 is_stmt 0
 457              	#APP
 458              	# 125 "src/InterruptHandler.cpp" 1
 459              		mv a0, a2
 460              	# 0 "" 2
 461              	.LVL9:
 126:src/InterruptHandler.cpp ****     __asm__ volatile ("mv %0, a1" : "=r" (handle));
 462              		.loc 1 126 5 is_stmt 1
 126:src/InterruptHandler.cpp ****     __asm__ volatile ("mv %0, a1" : "=r" (handle));
 463              		.loc 1 126 51 is_stmt 0
 464              	# 126 "src/InterruptHandler.cpp" 1
 465              		mv a5, a1
 466              	# 0 "" 2
 467              	#NO_APP
 468 0280 2338F4FC 		sd	a5,-48(s0)
 128:src/InterruptHandler.cpp ****     *handle = Nit::konstruktor(start_routine,arg);
 469              		.loc 1 128 5 is_stmt 1
 128:src/InterruptHandler.cpp ****     *handle = Nit::konstruktor(start_routine,arg);
 470              		.loc 1 128 31 is_stmt 0
 471 0284 833584FD 		ld	a1,-40(s0)
 128:src/InterruptHandler.cpp ****     *handle = Nit::konstruktor(start_routine,arg);
 472              		.loc 1 128 6
 473 0288 833404FD 		ld	s1,-48(s0)
 128:src/InterruptHandler.cpp ****     *handle = Nit::konstruktor(start_routine,arg);
 474              		.loc 1 128 31
 475 028c 97000000 		call	_ZN3Nit11konstruktorEPFvPvES0_@plt
 475      E7800000 
 476              	.LVL10:
 128:src/InterruptHandler.cpp ****     *handle = Nit::konstruktor(start_routine,arg);
 477              		.loc 1 128 13
 478 0294 23B0A400 		sd	a0,0(s1)
 130:src/InterruptHandler.cpp ****     if(*handle==nullptr) {
 479              		.loc 1 130 5 is_stmt 1
 480              	.LBB16:
 130:src/InterruptHandler.cpp ****     if(*handle==nullptr) {
 481              		.loc 1 130 9 is_stmt 0
 482 0298 833704FD 		ld	a5,-48(s0)
 130:src/InterruptHandler.cpp ****     if(*handle==nullptr) {
 483              		.loc 1 130 8
 484 029c 83B70700 		ld	a5,0(a5)
 130:src/InterruptHandler.cpp ****     if(*handle==nullptr) {
 485              		.loc 1 130 5
GAS LISTING /tmp/ccs4yEhA.s 			page 16


 486 02a0 638C0700 		beqz	a5,.L20
 487              	.L17:
 488              	.LBE16:
 135:src/InterruptHandler.cpp **** }
 489              		.loc 1 135 1
 490 02a4 83308103 		ld	ra,56(sp)
 491              		.cfi_remember_state
 492              		.cfi_restore 1
 493 02a8 03340103 		ld	s0,48(sp)
 494              		.cfi_restore 8
 495              		.cfi_def_cfa 2, 64
 496 02ac 83348102 		ld	s1,40(sp)
 497              		.cfi_restore 9
 498 02b0 13010104 		addi	sp,sp,64
 499              		.cfi_def_cfa_offset 0
 500 02b4 67800000 		jr	ra
 501              	.L20:
 502              		.cfi_restore_state
 503              	.LBB18:
 504              	.LBB17:
 131:src/InterruptHandler.cpp ****         uint64 volatile a0=-2;
 505              		.loc 1 131 9 is_stmt 1
 131:src/InterruptHandler.cpp ****         uint64 volatile a0=-2;
 506              		.loc 1 131 25 is_stmt 0
 507 02b8 9307E0FF 		li	a5,-2
 508 02bc 2334F4FC 		sd	a5,-56(s0)
 132:src/InterruptHandler.cpp ****         __asm__ volatile ("mv a0, %0" : : "r" (a0));
 509              		.loc 1 132 9 is_stmt 1
 132:src/InterruptHandler.cpp ****         __asm__ volatile ("mv a0, %0" : : "r" (a0));
 510              		.loc 1 132 48 is_stmt 0
 511 02c0 833784FC 		ld	a5,-56(s0)
 132:src/InterruptHandler.cpp ****         __asm__ volatile ("mv a0, %0" : : "r" (a0));
 512              		.loc 1 132 52
 513              	#APP
 514              	# 132 "src/InterruptHandler.cpp" 1
 515              		mv a0, a5
 516              	# 0 "" 2
 517              	#NO_APP
 518              	.LBE17:
 519              	.LBE18:
 135:src/InterruptHandler.cpp **** }
 520              		.loc 1 135 1
 521 02c8 6FF0DFFD 		j	.L17
 522              		.cfi_endproc
 523              	.LFE27:
 525              		.align	2
 526              		.globl	_Z12thread__joinv
 528              	_Z12thread__joinv:
 529              	.LFB30:
 149:src/InterruptHandler.cpp **** void thread__join(){
 530              		.loc 1 149 20 is_stmt 1
 531              		.cfi_startproc
 532 02cc 130101FD 		addi	sp,sp,-48
 533              		.cfi_def_cfa_offset 48
 534 02d0 23341102 		sd	ra,40(sp)
 535 02d4 23308102 		sd	s0,32(sp)
 536              		.cfi_offset 1, -8
GAS LISTING /tmp/ccs4yEhA.s 			page 17


 537              		.cfi_offset 8, -16
 538 02d8 13040103 		addi	s0,sp,48
 539              		.cfi_def_cfa 8, 0
 150:src/InterruptHandler.cpp ****     Nit *volatile thread;
 540              		.loc 1 150 5
 151:src/InterruptHandler.cpp ****     __asm__ volatile ("mv %0, a1" : "=r" (thread));
 541              		.loc 1 151 5
 151:src/InterruptHandler.cpp ****     __asm__ volatile ("mv %0, a1" : "=r" (thread));
 542              		.loc 1 151 51 is_stmt 0
 543              	#APP
 544              	# 151 "src/InterruptHandler.cpp" 1
 545              		mv a5, a1
 546              	# 0 "" 2
 547              	#NO_APP
 548 02e0 2334F4FE 		sd	a5,-24(s0)
 153:src/InterruptHandler.cpp ****     if(thread!=nullptr && !thread->finished){
 549              		.loc 1 153 5 is_stmt 1
 550              	.LBB19:
 153:src/InterruptHandler.cpp ****     if(thread!=nullptr && !thread->finished){
 551              		.loc 1 153 8 is_stmt 0
 552 02e4 833784FE 		ld	a5,-24(s0)
 153:src/InterruptHandler.cpp ****     if(thread!=nullptr && !thread->finished){
 553              		.loc 1 153 24
 554 02e8 63880700 		beqz	a5,.L21
 153:src/InterruptHandler.cpp ****     if(thread!=nullptr && !thread->finished){
 555              		.loc 1 153 28 discriminator 1
 556 02ec 833784FE 		ld	a5,-24(s0)
 153:src/InterruptHandler.cpp ****     if(thread!=nullptr && !thread->finished){
 557              		.loc 1 153 36 discriminator 1
 558 02f0 83C74700 		lbu	a5,4(a5)
 153:src/InterruptHandler.cpp ****     if(thread!=nullptr && !thread->finished){
 559              		.loc 1 153 24 discriminator 1
 560 02f4 638A0700 		beqz	a5,.L24
 561              	.L21:
 562              	.LBE19:
 162:src/InterruptHandler.cpp **** }
 563              		.loc 1 162 1
 564 02f8 83308102 		ld	ra,40(sp)
 565              		.cfi_remember_state
 566              		.cfi_restore 1
 567 02fc 03340102 		ld	s0,32(sp)
 568              		.cfi_restore 8
 569              		.cfi_def_cfa 2, 48
 570 0300 13010103 		addi	sp,sp,48
 571              		.cfi_def_cfa_offset 0
 572 0304 67800000 		jr	ra
 573              	.L24:
 574              		.cfi_restore_state
 575              	.LBB21:
 576              	.LBB20:
 154:src/InterruptHandler.cpp ****         uint64 volatile sepc;
 577              		.loc 1 154 9 is_stmt 1
 155:src/InterruptHandler.cpp ****         uint64 volatile sstatus;
 578              		.loc 1 155 9
 156:src/InterruptHandler.cpp ****         __asm__ volatile("csrr %0, sepc" : "=r" (sepc)); // sepc
 579              		.loc 1 156 9
 156:src/InterruptHandler.cpp ****         __asm__ volatile("csrr %0, sepc" : "=r" (sepc)); // sepc
GAS LISTING /tmp/ccs4yEhA.s 			page 18


 580              		.loc 1 156 56 is_stmt 0
 581              	#APP
 582              	# 156 "src/InterruptHandler.cpp" 1
 583              		csrr a5, sepc
 584              	# 0 "" 2
 585              	#NO_APP
 586 030c 233CF4FC 		sd	a5,-40(s0)
 157:src/InterruptHandler.cpp ****         __asm__ volatile("csrr %0, sstatus" : "=r" (sstatus)); // sstatus_r
 587              		.loc 1 157 9 is_stmt 1
 157:src/InterruptHandler.cpp ****         __asm__ volatile("csrr %0, sstatus" : "=r" (sstatus)); // sstatus_r
 588              		.loc 1 157 62 is_stmt 0
 589              	#APP
 590              	# 157 "src/InterruptHandler.cpp" 1
 591              		csrr a5, sstatus
 592              	# 0 "" 2
 593              	#NO_APP
 594 0314 2330F4FE 		sd	a5,-32(s0)
 158:src/InterruptHandler.cpp ****         thread->join();
 595              		.loc 1 158 9 is_stmt 1
 158:src/InterruptHandler.cpp ****         thread->join();
 596              		.loc 1 158 21 is_stmt 0
 597 0318 033584FE 		ld	a0,-24(s0)
 598 031c 97000000 		call	_ZN3Nit4joinEv@plt
 598      E7800000 
 599              	.LVL11:
 159:src/InterruptHandler.cpp ****         __asm__ volatile("csrw sepc, %0" : : "r" (sepc)); // sepc_w
 600              		.loc 1 159 9 is_stmt 1
 159:src/InterruptHandler.cpp ****         __asm__ volatile("csrw sepc, %0" : : "r" (sepc)); // sepc_w
 601              		.loc 1 159 51 is_stmt 0
 602 0324 833784FD 		ld	a5,-40(s0)
 159:src/InterruptHandler.cpp ****         __asm__ volatile("csrw sepc, %0" : : "r" (sepc)); // sepc_w
 603              		.loc 1 159 57
 604              	#APP
 605              	# 159 "src/InterruptHandler.cpp" 1
 160:src/InterruptHandler.cpp ****         __asm__ volatile("csrw sstatus, %0" : : "r" (sstatus)); // sstatus_w
 606              		csrw sepc, a5
 607              	# 0 "" 2
 608              		.loc 1 160 9 is_stmt 1
 160:src/InterruptHandler.cpp ****         __asm__ volatile("csrw sstatus, %0" : : "r" (sstatus)); // sstatus_w
 609              		.loc 1 160 54 is_stmt 0
 610              	#NO_APP
 611 032c 833704FE 		ld	a5,-32(s0)
 160:src/InterruptHandler.cpp ****         __asm__ volatile("csrw sstatus, %0" : : "r" (sstatus)); // sstatus_w
 612              		.loc 1 160 63
 613              	#APP
 614              	# 160 "src/InterruptHandler.cpp" 1
 615              		csrw sstatus, a5
 616              	# 0 "" 2
 617              	#NO_APP
 618              	.LBE20:
 619              	.LBE21:
 162:src/InterruptHandler.cpp **** }
 620              		.loc 1 162 1
 621 0334 6FF05FFC 		j	.L21
 622              		.cfi_endproc
 623              	.LFE30:
 625              		.align	2
GAS LISTING /tmp/ccs4yEhA.s 			page 19


 626              		.globl	_Z10sem__closev
 628              	_Z10sem__closev:
 629              	.LFB32:
 175:src/InterruptHandler.cpp **** void sem__close(){
 630              		.loc 1 175 18 is_stmt 1
 631              		.cfi_startproc
 632 0338 130101FE 		addi	sp,sp,-32
 633              		.cfi_def_cfa_offset 32
 634 033c 233C1100 		sd	ra,24(sp)
 635 0340 23388100 		sd	s0,16(sp)
 636              		.cfi_offset 1, -8
 637              		.cfi_offset 8, -16
 638 0344 13040102 		addi	s0,sp,32
 639              		.cfi_def_cfa 8, 0
 176:src/InterruptHandler.cpp ****     Semafor* volatile id;
 640              		.loc 1 176 5
 177:src/InterruptHandler.cpp ****     __asm__ volatile ("mv %0, a1" : "=r" (id));
 641              		.loc 1 177 5
 177:src/InterruptHandler.cpp ****     __asm__ volatile ("mv %0, a1" : "=r" (id));
 642              		.loc 1 177 47 is_stmt 0
 643              	#APP
 644              	# 177 "src/InterruptHandler.cpp" 1
 645              		mv a5, a1
 646              	# 0 "" 2
 647              	#NO_APP
 648 034c 2334F4FE 		sd	a5,-24(s0)
 179:src/InterruptHandler.cpp ****     id->close();
 649              		.loc 1 179 5 is_stmt 1
 179:src/InterruptHandler.cpp ****     id->close();
 650              		.loc 1 179 14 is_stmt 0
 651 0350 033584FE 		ld	a0,-24(s0)
 652 0354 97000000 		call	_ZN7Semafor5closeEv@plt
 652      E7800000 
 653              	.LVL12:
 181:src/InterruptHandler.cpp ****     int a0=0;
 654              		.loc 1 181 5 is_stmt 1
 182:src/InterruptHandler.cpp ****     __asm__ volatile ("mv a0, %0" : : "r" (a0));
 655              		.loc 1 182 5
 182:src/InterruptHandler.cpp ****     __asm__ volatile ("mv a0, %0" : : "r" (a0));
 656              		.loc 1 182 48 is_stmt 0
 657 035c 93070000 		li	a5,0
 658              	#APP
 659              	# 182 "src/InterruptHandler.cpp" 1
 183:src/InterruptHandler.cpp **** }
 660              		mv a0, a5
 661              	# 0 "" 2
 662              		.loc 1 183 1
 663              	#NO_APP
 664 0364 83308101 		ld	ra,24(sp)
 665              		.cfi_restore 1
 666 0368 03340101 		ld	s0,16(sp)
 667              		.cfi_restore 8
 668              		.cfi_def_cfa 2, 32
 669 036c 13010102 		addi	sp,sp,32
 670              		.cfi_def_cfa_offset 0
 671 0370 67800000 		jr	ra
 672              		.cfi_endproc
GAS LISTING /tmp/ccs4yEhA.s 			page 20


 673              	.LFE32:
 675              		.align	2
 676              		.globl	_Z9sem__waitv
 678              	_Z9sem__waitv:
 679              	.LFB33:
 184:src/InterruptHandler.cpp **** void sem__wait(){
 680              		.loc 1 184 17 is_stmt 1
 681              		.cfi_startproc
 682 0374 130101FD 		addi	sp,sp,-48
 683              		.cfi_def_cfa_offset 48
 684 0378 23341102 		sd	ra,40(sp)
 685 037c 23308102 		sd	s0,32(sp)
 686              		.cfi_offset 1, -8
 687              		.cfi_offset 8, -16
 688 0380 13040103 		addi	s0,sp,48
 689              		.cfi_def_cfa 8, 0
 185:src/InterruptHandler.cpp ****     Semafor* volatile id;
 690              		.loc 1 185 5
 186:src/InterruptHandler.cpp ****     __asm__ volatile ("mv %0, a1" : "=r" (id));
 691              		.loc 1 186 5
 186:src/InterruptHandler.cpp ****     __asm__ volatile ("mv %0, a1" : "=r" (id));
 692              		.loc 1 186 47 is_stmt 0
 693              	#APP
 694              	# 186 "src/InterruptHandler.cpp" 1
 695              		mv a5, a1
 696              	# 0 "" 2
 697              	#NO_APP
 698 0388 2334F4FE 		sd	a5,-24(s0)
 188:src/InterruptHandler.cpp ****     int volatile a0;
 699              		.loc 1 188 5 is_stmt 1
 190:src/InterruptHandler.cpp ****     a0=id->wait();
 700              		.loc 1 190 5
 190:src/InterruptHandler.cpp ****     a0=id->wait();
 701              		.loc 1 190 16 is_stmt 0
 702 038c 033584FE 		ld	a0,-24(s0)
 703 0390 97000000 		call	_ZN7Semafor4waitEv@plt
 703      E7800000 
 704              	.LVL13:
 190:src/InterruptHandler.cpp ****     a0=id->wait();
 705              		.loc 1 190 7
 706 0398 2322A4FE 		sw	a0,-28(s0)
 192:src/InterruptHandler.cpp ****     uint64 volatile sepc;
 707              		.loc 1 192 5 is_stmt 1
 193:src/InterruptHandler.cpp ****     uint64 volatile sstatus;
 708              		.loc 1 193 5
 194:src/InterruptHandler.cpp ****     __asm__ volatile("csrr %0, sepc" : "=r" (sepc)); // sepc
 709              		.loc 1 194 5
 194:src/InterruptHandler.cpp ****     __asm__ volatile("csrr %0, sepc" : "=r" (sepc)); // sepc
 710              		.loc 1 194 52 is_stmt 0
 711              	#APP
 712              	# 194 "src/InterruptHandler.cpp" 1
 713              		csrr a5, sepc
 714              	# 0 "" 2
 715              	#NO_APP
 716 03a0 233CF4FC 		sd	a5,-40(s0)
 195:src/InterruptHandler.cpp ****     __asm__ volatile("csrr %0, sstatus" : "=r" (sstatus)); // sstatus_r
 717              		.loc 1 195 5 is_stmt 1
GAS LISTING /tmp/ccs4yEhA.s 			page 21


 195:src/InterruptHandler.cpp ****     __asm__ volatile("csrr %0, sstatus" : "=r" (sstatus)); // sstatus_r
 718              		.loc 1 195 58 is_stmt 0
 719              	#APP
 720              	# 195 "src/InterruptHandler.cpp" 1
 721              		csrr a5, sstatus
 722              	# 0 "" 2
 723              	#NO_APP
 724 03a8 2338F4FC 		sd	a5,-48(s0)
 196:src/InterruptHandler.cpp ****     Nit::dispatch();
 725              		.loc 1 196 5 is_stmt 1
 196:src/InterruptHandler.cpp ****     Nit::dispatch();
 726              		.loc 1 196 18 is_stmt 0
 727 03ac 97000000 		call	_ZN3Nit8dispatchEv@plt
 727      E7800000 
 728              	.LVL14:
 197:src/InterruptHandler.cpp ****     __asm__ volatile("csrw sepc, %0" : : "r" (sepc)); // sepc_w
 729              		.loc 1 197 5 is_stmt 1
 197:src/InterruptHandler.cpp ****     __asm__ volatile("csrw sepc, %0" : : "r" (sepc)); // sepc_w
 730              		.loc 1 197 47 is_stmt 0
 731 03b4 833784FD 		ld	a5,-40(s0)
 197:src/InterruptHandler.cpp ****     __asm__ volatile("csrw sepc, %0" : : "r" (sepc)); // sepc_w
 732              		.loc 1 197 53
 733              	#APP
 734              	# 197 "src/InterruptHandler.cpp" 1
 198:src/InterruptHandler.cpp ****     __asm__ volatile("csrw sstatus, %0" : : "r" (sstatus)); // sstatus_w
 735              		csrw sepc, a5
 736              	# 0 "" 2
 737              		.loc 1 198 5 is_stmt 1
 198:src/InterruptHandler.cpp ****     __asm__ volatile("csrw sstatus, %0" : : "r" (sstatus)); // sstatus_w
 738              		.loc 1 198 50 is_stmt 0
 739              	#NO_APP
 740 03bc 833704FD 		ld	a5,-48(s0)
 198:src/InterruptHandler.cpp ****     __asm__ volatile("csrw sstatus, %0" : : "r" (sstatus)); // sstatus_w
 741              		.loc 1 198 59
 742              	#APP
 743              	# 198 "src/InterruptHandler.cpp" 1
 200:src/InterruptHandler.cpp ****     a0=Nit::running->prekid;
 744              		csrw sstatus, a5
 745              	# 0 "" 2
 746              		.loc 1 200 5 is_stmt 1
 200:src/InterruptHandler.cpp ****     a0=Nit::running->prekid;
 747              		.loc 1 200 22 is_stmt 0
 748              	#NO_APP
 749 03c4 97070000 		la	a5,_ZN3Nit7runningE
 749      83B70700 
 750 03cc 83B70700 		ld	a5,0(a5)
 751 03d0 83A70700 		lw	a5,0(a5)
 200:src/InterruptHandler.cpp ****     a0=Nit::running->prekid;
 752              		.loc 1 200 7
 753 03d4 2322F4FE 		sw	a5,-28(s0)
 201:src/InterruptHandler.cpp ****     __asm__ volatile ("mv a0, %0" : : "r" (a0));
 754              		.loc 1 201 5 is_stmt 1
 201:src/InterruptHandler.cpp ****     __asm__ volatile ("mv a0, %0" : : "r" (a0));
 755              		.loc 1 201 44 is_stmt 0
 756 03d8 832744FE 		lw	a5,-28(s0)
 201:src/InterruptHandler.cpp ****     __asm__ volatile ("mv a0, %0" : : "r" (a0));
 757              		.loc 1 201 48
GAS LISTING /tmp/ccs4yEhA.s 			page 22


 758              	#APP
 759              	# 201 "src/InterruptHandler.cpp" 1
 202:src/InterruptHandler.cpp **** }
 760              		mv a0, a5
 761              	# 0 "" 2
 762              		.loc 1 202 1
 763              	#NO_APP
 764 03e0 83308102 		ld	ra,40(sp)
 765              		.cfi_restore 1
 766 03e4 03340102 		ld	s0,32(sp)
 767              		.cfi_restore 8
 768              		.cfi_def_cfa 2, 48
 769 03e8 13010103 		addi	sp,sp,48
 770              		.cfi_def_cfa_offset 0
 771 03ec 67800000 		jr	ra
 772              		.cfi_endproc
 773              	.LFE33:
 775              		.align	2
 776              		.globl	_Z11sem__signalv
 778              	_Z11sem__signalv:
 779              	.LFB34:
 203:src/InterruptHandler.cpp **** void sem__signal(){
 780              		.loc 1 203 19 is_stmt 1
 781              		.cfi_startproc
 782 03f0 130101FE 		addi	sp,sp,-32
 783              		.cfi_def_cfa_offset 32
 784 03f4 233C1100 		sd	ra,24(sp)
 785 03f8 23388100 		sd	s0,16(sp)
 786              		.cfi_offset 1, -8
 787              		.cfi_offset 8, -16
 788 03fc 13040102 		addi	s0,sp,32
 789              		.cfi_def_cfa 8, 0
 204:src/InterruptHandler.cpp ****     Semafor* volatile id;
 790              		.loc 1 204 5
 205:src/InterruptHandler.cpp ****     __asm__ volatile ("mv %0, a1" : "=r" (id));
 791              		.loc 1 205 5
 205:src/InterruptHandler.cpp ****     __asm__ volatile ("mv %0, a1" : "=r" (id));
 792              		.loc 1 205 47 is_stmt 0
 793              	#APP
 794              	# 205 "src/InterruptHandler.cpp" 1
 795              		mv a5, a1
 796              	# 0 "" 2
 797              	#NO_APP
 798 0404 2334F4FE 		sd	a5,-24(s0)
 206:src/InterruptHandler.cpp ****     id->signal();
 799              		.loc 1 206 5 is_stmt 1
 206:src/InterruptHandler.cpp ****     id->signal();
 800              		.loc 1 206 15 is_stmt 0
 801 0408 033584FE 		ld	a0,-24(s0)
 802 040c 97000000 		call	_ZN7Semafor6signalEv@plt
 802      E7800000 
 803              	.LVL15:
 207:src/InterruptHandler.cpp **** }
 804              		.loc 1 207 1
 805 0414 83308101 		ld	ra,24(sp)
 806              		.cfi_restore 1
 807 0418 03340101 		ld	s0,16(sp)
GAS LISTING /tmp/ccs4yEhA.s 			page 23


 808              		.cfi_restore 8
 809              		.cfi_def_cfa 2, 32
 810 041c 13010102 		addi	sp,sp,32
 811              		.cfi_def_cfa_offset 0
 812 0420 67800000 		jr	ra
 813              		.cfi_endproc
 814              	.LFE34:
 816              		.align	2
 817              		.globl	_Z11time__sleepv
 819              	_Z11time__sleepv:
 820              	.LFB35:
 208:src/InterruptHandler.cpp **** void time__sleep(){
 821              		.loc 1 208 19 is_stmt 1
 822              		.cfi_startproc
 823 0424 130101FF 		addi	sp,sp,-16
 824              		.cfi_def_cfa_offset 16
 825 0428 23341100 		sd	ra,8(sp)
 826 042c 23308100 		sd	s0,0(sp)
 827              		.cfi_offset 1, -8
 828              		.cfi_offset 8, -16
 829 0430 13040101 		addi	s0,sp,16
 830              		.cfi_def_cfa 8, 0
 209:src/InterruptHandler.cpp ****     time_t t;
 831              		.loc 1 209 5
 210:src/InterruptHandler.cpp ****     __asm__ volatile ("mv %0, a1" : "=r" (t));
 832              		.loc 1 210 5
 210:src/InterruptHandler.cpp ****     __asm__ volatile ("mv %0, a1" : "=r" (t));
 833              		.loc 1 210 46 is_stmt 0
 834              	#APP
 835              	# 210 "src/InterruptHandler.cpp" 1
 836              		mv a0, a1
 837              	# 0 "" 2
 838              	.LVL16:
 211:src/InterruptHandler.cpp ****     Scheduler::threadsleep(t);
 839              		.loc 1 211 5 is_stmt 1
 211:src/InterruptHandler.cpp ****     Scheduler::threadsleep(t);
 840              		.loc 1 211 27 is_stmt 0
 841              	#NO_APP
 842 0438 1B050500 		sext.w	a0,a0
 843              	.LVL17:
 844 043c 97000000 		call	_ZN9Scheduler11threadsleepEi@plt
 844      E7800000 
 845              	.LVL18:
 212:src/InterruptHandler.cpp **** }
 846              		.loc 1 212 1
 847 0444 83308100 		ld	ra,8(sp)
 848              		.cfi_restore 1
 849 0448 03340100 		ld	s0,0(sp)
 850              		.cfi_restore 8
 851              		.cfi_def_cfa 2, 16
 852 044c 13010101 		addi	sp,sp,16
 853              		.cfi_def_cfa_offset 0
 854 0450 67800000 		jr	ra
 855              		.cfi_endproc
 856              	.LFE35:
 858              		.align	2
 859              		.globl	_Z5getc_v
GAS LISTING /tmp/ccs4yEhA.s 			page 24


 861              	_Z5getc_v:
 862              	.LFB36:
 213:src/InterruptHandler.cpp **** void getc_(){
 863              		.loc 1 213 13 is_stmt 1
 864              		.cfi_startproc
 865 0454 130101FE 		addi	sp,sp,-32
 866              		.cfi_def_cfa_offset 32
 867 0458 233C1100 		sd	ra,24(sp)
 868 045c 23388100 		sd	s0,16(sp)
 869              		.cfi_offset 1, -8
 870              		.cfi_offset 8, -16
 871 0460 13040102 		addi	s0,sp,32
 872              		.cfi_def_cfa 8, 0
 214:src/InterruptHandler.cpp ****     uint64 volatile sepc;
 873              		.loc 1 214 5
 215:src/InterruptHandler.cpp ****     uint64 volatile sstatus;
 874              		.loc 1 215 5
 216:src/InterruptHandler.cpp ****     __asm__ volatile("csrr %0, sepc" : "=r" (sepc)); // sepc
 875              		.loc 1 216 5
 216:src/InterruptHandler.cpp ****     __asm__ volatile("csrr %0, sepc" : "=r" (sepc)); // sepc
 876              		.loc 1 216 52 is_stmt 0
 877              	#APP
 878              	# 216 "src/InterruptHandler.cpp" 1
 879              		csrr a5, sepc
 880              	# 0 "" 2
 881              	#NO_APP
 882 0468 2334F4FE 		sd	a5,-24(s0)
 217:src/InterruptHandler.cpp ****     __asm__ volatile("csrr %0, sstatus" : "=r" (sstatus)); // sstatus_r
 883              		.loc 1 217 5 is_stmt 1
 217:src/InterruptHandler.cpp ****     __asm__ volatile("csrr %0, sstatus" : "=r" (sstatus)); // sstatus_r
 884              		.loc 1 217 58 is_stmt 0
 885              	#APP
 886              	# 217 "src/InterruptHandler.cpp" 1
 887              		csrr a5, sstatus
 888              	# 0 "" 2
 889              	#NO_APP
 890 0470 2330F4FE 		sd	a5,-32(s0)
 219:src/InterruptHandler.cpp ****     Konzola::getulaz();
 891              		.loc 1 219 5 is_stmt 1
 219:src/InterruptHandler.cpp ****     Konzola::getulaz();
 892              		.loc 1 219 21 is_stmt 0
 893 0474 97000000 		call	_ZN7Konzola7getulazEv@plt
 893      E7800000 
 894              	.LVL19:
 220:src/InterruptHandler.cpp ****     __asm__ volatile("sd a0, 80(s0)");
 895              		.loc 1 220 5 is_stmt 1
 220:src/InterruptHandler.cpp ****     __asm__ volatile("sd a0, 80(s0)");
 896              		.loc 1 220 38 is_stmt 0
 897              	#APP
 898              	# 220 "src/InterruptHandler.cpp" 1
 222:src/InterruptHandler.cpp ****     __asm__ volatile("csrw sepc, %0" : : "r" (sepc)); // sepc_w
 899              		sd a0, 80(s0)
 900              	# 0 "" 2
 901              		.loc 1 222 5 is_stmt 1
 222:src/InterruptHandler.cpp ****     __asm__ volatile("csrw sepc, %0" : : "r" (sepc)); // sepc_w
 902              		.loc 1 222 47 is_stmt 0
 903              	#NO_APP
GAS LISTING /tmp/ccs4yEhA.s 			page 25


 904 0480 833784FE 		ld	a5,-24(s0)
 222:src/InterruptHandler.cpp ****     __asm__ volatile("csrw sepc, %0" : : "r" (sepc)); // sepc_w
 905              		.loc 1 222 53
 906              	#APP
 907              	# 222 "src/InterruptHandler.cpp" 1
 223:src/InterruptHandler.cpp ****     __asm__ volatile("csrw sstatus, %0" : : "r" (sstatus)); // sstatus_w
 908              		csrw sepc, a5
 909              	# 0 "" 2
 910              		.loc 1 223 5 is_stmt 1
 223:src/InterruptHandler.cpp ****     __asm__ volatile("csrw sstatus, %0" : : "r" (sstatus)); // sstatus_w
 911              		.loc 1 223 50 is_stmt 0
 912              	#NO_APP
 913 0488 833704FE 		ld	a5,-32(s0)
 223:src/InterruptHandler.cpp ****     __asm__ volatile("csrw sstatus, %0" : : "r" (sstatus)); // sstatus_w
 914              		.loc 1 223 59
 915              	#APP
 916              	# 223 "src/InterruptHandler.cpp" 1
 224:src/InterruptHandler.cpp **** }
 917              		csrw sstatus, a5
 918              	# 0 "" 2
 919              		.loc 1 224 1
 920              	#NO_APP
 921 0490 83308101 		ld	ra,24(sp)
 922              		.cfi_restore 1
 923 0494 03340101 		ld	s0,16(sp)
 924              		.cfi_restore 8
 925              		.cfi_def_cfa 2, 32
 926 0498 13010102 		addi	sp,sp,32
 927              		.cfi_def_cfa_offset 0
 928 049c 67800000 		jr	ra
 929              		.cfi_endproc
 930              	.LFE36:
 932              		.align	2
 933              		.globl	_Z5putc_v
 935              	_Z5putc_v:
 936              	.LFB37:
 225:src/InterruptHandler.cpp **** void putc_(){
 937              		.loc 1 225 13 is_stmt 1
 938              		.cfi_startproc
 939 04a0 130101FD 		addi	sp,sp,-48
 940              		.cfi_def_cfa_offset 48
 941 04a4 23341102 		sd	ra,40(sp)
 942 04a8 23308102 		sd	s0,32(sp)
 943              		.cfi_offset 1, -8
 944              		.cfi_offset 8, -16
 945 04ac 13040103 		addi	s0,sp,48
 946              		.cfi_def_cfa 8, 0
 226:src/InterruptHandler.cpp ****     char volatile c;
 947              		.loc 1 226 5
 227:src/InterruptHandler.cpp ****     uint64 volatile sepc;
 948              		.loc 1 227 5
 228:src/InterruptHandler.cpp ****     uint64 volatile sstatus;
 949              		.loc 1 228 5
 229:src/InterruptHandler.cpp ****     __asm__ volatile ("mv %0, a1" : "=r" (c));
 950              		.loc 1 229 5
 229:src/InterruptHandler.cpp ****     __asm__ volatile ("mv %0, a1" : "=r" (c));
 951              		.loc 1 229 46 is_stmt 0
GAS LISTING /tmp/ccs4yEhA.s 			page 26


 952              	#APP
 953              	# 229 "src/InterruptHandler.cpp" 1
 954              		mv a5, a1
 955              	# 0 "" 2
 956              	#NO_APP
 957 04b4 A307F4FE 		sb	a5,-17(s0)
 230:src/InterruptHandler.cpp ****     __asm__ volatile("csrr %0, sepc" : "=r" (sepc)); // sepc
 958              		.loc 1 230 5 is_stmt 1
 230:src/InterruptHandler.cpp ****     __asm__ volatile("csrr %0, sepc" : "=r" (sepc)); // sepc
 959              		.loc 1 230 52 is_stmt 0
 960              	#APP
 961              	# 230 "src/InterruptHandler.cpp" 1
 962              		csrr a5, sepc
 963              	# 0 "" 2
 964              	#NO_APP
 965 04bc 2330F4FE 		sd	a5,-32(s0)
 231:src/InterruptHandler.cpp ****     __asm__ volatile("csrr %0, sstatus" : "=r" (sstatus)); // sstatus_r
 966              		.loc 1 231 5 is_stmt 1
 231:src/InterruptHandler.cpp ****     __asm__ volatile("csrr %0, sstatus" : "=r" (sstatus)); // sstatus_r
 967              		.loc 1 231 58 is_stmt 0
 968              	#APP
 969              	# 231 "src/InterruptHandler.cpp" 1
 970              		csrr a5, sstatus
 971              	# 0 "" 2
 972              	#NO_APP
 973 04c4 233CF4FC 		sd	a5,-40(s0)
 234:src/InterruptHandler.cpp ****     Konzola::putizlaz(c);
 974              		.loc 1 234 5 is_stmt 1
 234:src/InterruptHandler.cpp ****     Konzola::putizlaz(c);
 975              		.loc 1 234 22 is_stmt 0
 976 04c8 0345F4FE 		lbu	a0,-17(s0)
 977 04cc 1375F50F 		andi	a0,a0,0xff
 978 04d0 97000000 		call	_ZN7Konzola8putizlazEi@plt
 978      E7800000 
 979              	.LVL20:
 236:src/InterruptHandler.cpp ****     __asm__ volatile("csrw sepc, %0" : : "r" (sepc)); // sepc_w
 980              		.loc 1 236 5 is_stmt 1
 236:src/InterruptHandler.cpp ****     __asm__ volatile("csrw sepc, %0" : : "r" (sepc)); // sepc_w
 981              		.loc 1 236 47 is_stmt 0
 982 04d8 833704FE 		ld	a5,-32(s0)
 236:src/InterruptHandler.cpp ****     __asm__ volatile("csrw sepc, %0" : : "r" (sepc)); // sepc_w
 983              		.loc 1 236 53
 984              	#APP
 985              	# 236 "src/InterruptHandler.cpp" 1
 237:src/InterruptHandler.cpp ****     __asm__ volatile("csrw sstatus, %0" : : "r" (sstatus)); // sstatus_w
 986              		csrw sepc, a5
 987              	# 0 "" 2
 988              		.loc 1 237 5 is_stmt 1
 237:src/InterruptHandler.cpp ****     __asm__ volatile("csrw sstatus, %0" : : "r" (sstatus)); // sstatus_w
 989              		.loc 1 237 50 is_stmt 0
 990              	#NO_APP
 991 04e0 833784FD 		ld	a5,-40(s0)
 237:src/InterruptHandler.cpp ****     __asm__ volatile("csrw sstatus, %0" : : "r" (sstatus)); // sstatus_w
 992              		.loc 1 237 59
 993              	#APP
 994              	# 237 "src/InterruptHandler.cpp" 1
 238:src/InterruptHandler.cpp **** }
GAS LISTING /tmp/ccs4yEhA.s 			page 27


 995              		csrw sstatus, a5
 996              	# 0 "" 2
 997              		.loc 1 238 1
 998              	#NO_APP
 999 04e8 83308102 		ld	ra,40(sp)
 1000              		.cfi_restore 1
 1001 04ec 03340102 		ld	s0,32(sp)
 1002              		.cfi_restore 8
 1003              		.cfi_def_cfa 2, 48
 1004 04f0 13010103 		addi	sp,sp,48
 1005              		.cfi_def_cfa_offset 0
 1006 04f4 67800000 		jr	ra
 1007              		.cfi_endproc
 1008              	.LFE37:
 1010              		.section	.rodata.str1.8,"aMS",@progbits,1
 1011              		.align	3
 1012              	.LC0:
 1013 0000 424E543A 		.string	"BNT: \n"
 1013      200A00
 1014 0007 00       		.align	3
 1015              	.LC1:
 1016 0008 76616C75 		.string	"value: \n"
 1016      653A200A 
 1016      00
 1017              		.text
 1018              		.align	2
 1019              		.globl	handle
 1021              	handle:
 1022              	.LFB23:
  28:src/InterruptHandler.cpp **** extern "C" void handle(){
 1023              		.loc 1 28 25 is_stmt 1
 1024              		.cfi_startproc
 1025 04f8 130101FB 		addi	sp,sp,-80
 1026              		.cfi_def_cfa_offset 80
 1027 04fc 23341104 		sd	ra,72(sp)
 1028 0500 23308104 		sd	s0,64(sp)
 1029 0504 233C9102 		sd	s1,56(sp)
 1030              		.cfi_offset 1, -8
 1031              		.cfi_offset 8, -16
 1032              		.cfi_offset 9, -24
 1033 0508 13040105 		addi	s0,sp,80
 1034              		.cfi_def_cfa 8, 0
  30:src/InterruptHandler.cpp ****     if(functions[0x01]==nullptr){
 1035              		.loc 1 30 5
  30:src/InterruptHandler.cpp ****     if(functions[0x01]==nullptr){
 1036              		.loc 1 30 22 is_stmt 0
 1037 050c 97070000 		ld	a5,_ZL9functions+8
 1037      83B70700 
  30:src/InterruptHandler.cpp ****     if(functions[0x01]==nullptr){
 1038              		.loc 1 30 5
 1039 0514 63840706 		beqz	a5,.L47
 1040              	.L38:
  34:src/InterruptHandler.cpp ****     uint64 volatile prekid;
 1041              		.loc 1 34 5 is_stmt 1
  35:src/InterruptHandler.cpp ****     __asm__ volatile("csrr %0, scause" : "=r" (prekid));
 1042              		.loc 1 35 5
  35:src/InterruptHandler.cpp ****     __asm__ volatile("csrr %0, scause" : "=r" (prekid));
GAS LISTING /tmp/ccs4yEhA.s 			page 28


 1043              		.loc 1 35 56 is_stmt 0
 1044              	#APP
 1045              	# 35 "src/InterruptHandler.cpp" 1
 1046              		csrr a5, scause
 1047              	# 0 "" 2
 1048              	#NO_APP
 1049 051c 233CF4FC 		sd	a5,-40(s0)
  37:src/InterruptHandler.cpp ****     if(prekid%16>=8 && !(prekid >> 63)){
 1050              		.loc 1 37 5 is_stmt 1
 1051              	.LBB22:
  37:src/InterruptHandler.cpp ****     if(prekid%16>=8 && !(prekid >> 63)){
 1052              		.loc 1 37 8 is_stmt 0
 1053 0520 833784FD 		ld	a5,-40(s0)
  37:src/InterruptHandler.cpp ****     if(prekid%16>=8 && !(prekid >> 63)){
 1054              		.loc 1 37 17
 1055 0524 93F78700 		andi	a5,a5,8
  37:src/InterruptHandler.cpp ****     if(prekid%16>=8 && !(prekid >> 63)){
 1056              		.loc 1 37 21
 1057 0528 63800706 		beqz	a5,.L39
  37:src/InterruptHandler.cpp ****     if(prekid%16>=8 && !(prekid >> 63)){
 1058              		.loc 1 37 24 discriminator 1
 1059 052c 833784FD 		ld	a5,-40(s0)
  37:src/InterruptHandler.cpp ****     if(prekid%16>=8 && !(prekid >> 63)){
 1060              		.loc 1 37 21 discriminator 1
 1061 0530 63CC0704 		bltz	a5,.L39
 1062              	.LBB23:
  38:src/InterruptHandler.cpp ****         __asm__ volatile("csrr x3, sepc");
 1063              		.loc 1 38 9 is_stmt 1
  38:src/InterruptHandler.cpp ****         __asm__ volatile("csrr x3, sepc");
 1064              		.loc 1 38 42 is_stmt 0
 1065              	#APP
 1066              	# 38 "src/InterruptHandler.cpp" 1
  39:src/InterruptHandler.cpp ****         __asm__ volatile("addi x3,x3,4");
 1067              		csrr x3, sepc
 1068              	# 0 "" 2
 1069              		.loc 1 39 9 is_stmt 1
  39:src/InterruptHandler.cpp ****         __asm__ volatile("addi x3,x3,4");
 1070              		.loc 1 39 41 is_stmt 0
 1071              	# 39 "src/InterruptHandler.cpp" 1
  40:src/InterruptHandler.cpp ****         __asm__ volatile("csrw sepc, x3");
 1072              		addi x3,x3,4
 1073              	# 0 "" 2
 1074              		.loc 1 40 9 is_stmt 1
  40:src/InterruptHandler.cpp ****         __asm__ volatile("csrw sepc, x3");
 1075              		.loc 1 40 42 is_stmt 0
 1076              	# 40 "src/InterruptHandler.cpp" 1
  41:src/InterruptHandler.cpp ****         uint64 volatile a0;
 1077              		csrw sepc, x3
 1078              	# 0 "" 2
 1079              		.loc 1 41 9 is_stmt 1
  42:src/InterruptHandler.cpp ****         __asm__ volatile("mv %0, a0" : "=r" (a0));
 1080              		.loc 1 42 9
  42:src/InterruptHandler.cpp ****         __asm__ volatile("mv %0, a0" : "=r" (a0));
 1081              		.loc 1 42 50 is_stmt 0
 1082              	# 42 "src/InterruptHandler.cpp" 1
 1083              		mv a5, a0
 1084              	# 0 "" 2
GAS LISTING /tmp/ccs4yEhA.s 			page 29


 1085              	#NO_APP
 1086 0544 2330F4FC 		sd	a5,-64(s0)
  44:src/InterruptHandler.cpp ****         functions[a0]();
 1087              		.loc 1 44 9 is_stmt 1
  44:src/InterruptHandler.cpp ****         functions[a0]();
 1088              		.loc 1 44 19 is_stmt 0
 1089 0548 833704FC 		ld	a5,-64(s0)
  44:src/InterruptHandler.cpp ****         functions[a0]();
 1090              		.loc 1 44 21
 1091 054c 13973700 		slli	a4,a5,3
 1092 0550 97070000 		lla	a5,_ZL9functions
 1092      93870700 
 1093 0558 B387E700 		add	a5,a5,a4
 1094 055c 83B70700 		ld	a5,0(a5)
  44:src/InterruptHandler.cpp ****         functions[a0]();
 1095              		.loc 1 44 22
 1096 0560 E7800700 		jalr	a5
 1097              	.LVL21:
  45:src/InterruptHandler.cpp ****         __asm__ volatile ("sd a0, 80(s0)");
 1098              		.loc 1 45 9 is_stmt 1
  45:src/InterruptHandler.cpp ****         __asm__ volatile ("sd a0, 80(s0)");
 1099              		.loc 1 45 43 is_stmt 0
 1100              	#APP
 1101              	# 45 "src/InterruptHandler.cpp" 1
 1102              		sd a0, 80(s0)
 1103              	# 0 "" 2
 1104              	#NO_APP
 1105              	.L37:
 1106              	.LBE23:
 1107              	.LBE22:
  86:src/InterruptHandler.cpp **** }
 1108              		.loc 1 86 1
 1109 0568 83308104 		ld	ra,72(sp)
 1110              		.cfi_remember_state
 1111              		.cfi_restore 1
 1112 056c 03340104 		ld	s0,64(sp)
 1113              		.cfi_restore 8
 1114              		.cfi_def_cfa 2, 80
 1115 0570 83348103 		ld	s1,56(sp)
 1116              		.cfi_restore 9
 1117 0574 13010105 		addi	sp,sp,80
 1118              		.cfi_def_cfa_offset 0
 1119 0578 67800000 		jr	ra
 1120              	.L47:
 1121              		.cfi_restore_state
  31:src/InterruptHandler.cpp ****         initialization();
 1122              		.loc 1 31 9 is_stmt 1
  31:src/InterruptHandler.cpp ****         initialization();
 1123              		.loc 1 31 23 is_stmt 0
 1124 057c 97000000 		call	_ZL14initializationv
 1124      E7800000 
 1125              	.LVL22:
 1126 0584 6FF05FF9 		j	.L38
 1127              	.L39:
  49:src/InterruptHandler.cpp ****         if(prekid == 0x8000000000000001UL){
 1128              		.loc 1 49 9 is_stmt 1
 1129              	.LBB36:
GAS LISTING /tmp/ccs4yEhA.s 			page 30


 1130              	.LBB24:
  49:src/InterruptHandler.cpp ****         if(prekid == 0x8000000000000001UL){
 1131              		.loc 1 49 19 is_stmt 0
 1132 0588 033784FD 		ld	a4,-40(s0)
  49:src/InterruptHandler.cpp ****         if(prekid == 0x8000000000000001UL){
 1133              		.loc 1 49 9
 1134 058c 9307F0FF 		li	a5,-1
 1135 0590 9397F703 		slli	a5,a5,63
 1136 0594 93871700 		addi	a5,a5,1
 1137 0598 630CF708 		beq	a4,a5,.L48
 1138              	.LBE24:
 1139              	.LBE36:
  67:src/InterruptHandler.cpp ****         else if(prekid == 0x8000000000000009UL){
 1140              		.loc 1 67 14 is_stmt 1
 1141              	.LBB37:
 1142              	.LBB34:
 1143              	.LBB25:
  67:src/InterruptHandler.cpp ****         else if(prekid == 0x8000000000000009UL){
 1144              		.loc 1 67 24 is_stmt 0
 1145 059c 033784FD 		ld	a4,-40(s0)
  67:src/InterruptHandler.cpp ****         else if(prekid == 0x8000000000000009UL){
 1146              		.loc 1 67 14
 1147 05a0 9307F0FF 		li	a5,-1
 1148 05a4 9397F703 		slli	a5,a5,63
 1149 05a8 93879700 		addi	a5,a5,9
 1150 05ac 6306F70E 		beq	a4,a5,.L49
  76:src/InterruptHandler.cpp ****         else if(prekid!=0x8000000000000001UL) {
 1151              		.loc 1 76 14 is_stmt 1
  76:src/InterruptHandler.cpp ****         else if(prekid!=0x8000000000000001UL) {
 1152              		.loc 1 76 23 is_stmt 0
 1153 05b0 033784FD 		ld	a4,-40(s0)
  76:src/InterruptHandler.cpp ****         else if(prekid!=0x8000000000000001UL) {
 1154              		.loc 1 76 14
 1155 05b4 9307F0FF 		li	a5,-1
 1156 05b8 9397F703 		slli	a5,a5,63
 1157 05bc 93871700 		addi	a5,a5,1
 1158 05c0 E304F7FA 		beq	a4,a5,.L37
  77:src/InterruptHandler.cpp ****             if (scauseFlag == false) {
 1159              		.loc 1 77 13 is_stmt 1
  77:src/InterruptHandler.cpp ****             if (scauseFlag == false) {
 1160              		.loc 1 77 28 is_stmt 0
 1161 05c4 97070000 		lbu	a5,.LANCHOR0
 1161      83C70700 
  77:src/InterruptHandler.cpp ****             if (scauseFlag == false) {
 1162              		.loc 1 77 13
 1163 05cc E39E07F8 		bnez	a5,.L37
  78:src/InterruptHandler.cpp ****                 printString("BNT: \n");
 1164              		.loc 1 78 17 is_stmt 1
  78:src/InterruptHandler.cpp ****                 printString("BNT: \n");
 1165              		.loc 1 78 28 is_stmt 0
 1166 05d0 17050000 		lla	a0,.LC0
 1166      13050500 
 1167 05d8 97000000 		call	_Z11printStringPKc@plt
 1167      E7800000 
 1168              	.LVL23:
  79:src/InterruptHandler.cpp ****                 printInt(prekid >> 63);
 1169              		.loc 1 79 17 is_stmt 1
GAS LISTING /tmp/ccs4yEhA.s 			page 31


  79:src/InterruptHandler.cpp ****                 printInt(prekid >> 63);
 1170              		.loc 1 79 26 is_stmt 0
 1171 05e0 033584FD 		ld	a0,-40(s0)
  79:src/InterruptHandler.cpp ****                 printInt(prekid >> 63);
 1172              		.loc 1 79 25
 1173 05e4 13060000 		li	a2,0
 1174 05e8 9305A000 		li	a1,10
 1175 05ec 13250500 		slti	a0,a0,0
 1176 05f0 97000000 		call	_Z8printIntiii@plt
 1176      E7800000 
 1177              	.LVL24:
  80:src/InterruptHandler.cpp ****                 printString("value: \n");
 1178              		.loc 1 80 17 is_stmt 1
  80:src/InterruptHandler.cpp ****                 printString("value: \n");
 1179              		.loc 1 80 28 is_stmt 0
 1180 05f8 17050000 		lla	a0,.LC1
 1180      13050500 
 1181 0600 97000000 		call	_Z11printStringPKc@plt
 1181      E7800000 
 1182              	.LVL25:
  81:src/InterruptHandler.cpp ****                 printInt(prekid % 16);
 1183              		.loc 1 81 17 is_stmt 1
  81:src/InterruptHandler.cpp ****                 printInt(prekid % 16);
 1184              		.loc 1 81 33 is_stmt 0
 1185 0608 033584FD 		ld	a0,-40(s0)
  81:src/InterruptHandler.cpp ****                 printInt(prekid % 16);
 1186              		.loc 1 81 25
 1187 060c 13060000 		li	a2,0
 1188 0610 9305A000 		li	a1,10
 1189 0614 1375F500 		andi	a0,a0,15
 1190 0618 97000000 		call	_Z8printIntiii@plt
 1190      E7800000 
 1191              	.LVL26:
  82:src/InterruptHandler.cpp ****                 scauseFlag=true;
 1192              		.loc 1 82 17 is_stmt 1
  82:src/InterruptHandler.cpp ****                 scauseFlag=true;
 1193              		.loc 1 82 27 is_stmt 0
 1194 0620 93071000 		li	a5,1
 1195 0624 17070000 		sb	a5,.LANCHOR0,a4
 1195      2300F700 
 1196              	.LBE25:
 1197              	.LBE34:
 1198              	.LBE37:
  86:src/InterruptHandler.cpp **** }
 1199              		.loc 1 86 1
 1200 062c 6FF0DFF3 		j	.L37
 1201              	.L48:
 1202              	.LBB38:
 1203              	.LBB35:
 1204              	.LBB28:
  50:src/InterruptHandler.cpp ****             uint64 maska = 2;
 1205              		.loc 1 50 13 is_stmt 1
 1206              	.LVL27:
  51:src/InterruptHandler.cpp ****             Nit::tajmer++;
 1207              		.loc 1 51 13
  51:src/InterruptHandler.cpp ****             Nit::tajmer++;
 1208              		.loc 1 51 24 is_stmt 0
GAS LISTING /tmp/ccs4yEhA.s 			page 32


 1209 0630 97040000 		la	s1,_ZN3Nit6tajmerE
 1209      83B40400 
 1210 0638 83A70400 		lw	a5,0(s1)
 1211 063c 9B871700 		addiw	a5,a5,1
 1212 0640 23A0F400 		sw	a5,0(s1)
  52:src/InterruptHandler.cpp ****             Scheduler::dekremntacija(1);
 1213              		.loc 1 52 13 is_stmt 1
  52:src/InterruptHandler.cpp ****             Scheduler::dekremntacija(1);
 1214              		.loc 1 52 37 is_stmt 0
 1215 0644 13051000 		li	a0,1
 1216 0648 97000000 		call	_ZN9Scheduler13dekremntacijaEi@plt
 1216      E7800000 
 1217              	.LVL28:
  54:src/InterruptHandler.cpp ****             if (Nit::tajmer % (DEFAULT_TIME_SLICE) == 0) {
 1218              		.loc 1 54 13 is_stmt 1
 1219              	.LBB29:
  54:src/InterruptHandler.cpp ****             if (Nit::tajmer % (DEFAULT_TIME_SLICE) == 0) {
 1220              		.loc 1 54 22 is_stmt 0
 1221 0650 83A70400 		lw	a5,0(s1)
  54:src/InterruptHandler.cpp ****             if (Nit::tajmer % (DEFAULT_TIME_SLICE) == 0) {
 1222              		.loc 1 54 13
 1223 0654 93F71700 		andi	a5,a5,1
 1224 0658 63880700 		beqz	a5,.L50
 1225              	.L42:
 1226              	.LBE29:
  64:src/InterruptHandler.cpp ****             __asm__ volatile("csrc sip, %0"::"r" (maska));
 1227              		.loc 1 64 13 is_stmt 1
  64:src/InterruptHandler.cpp ****             __asm__ volatile("csrc sip, %0"::"r" (maska));
 1228              		.loc 1 64 58 is_stmt 0
 1229 065c 93072000 		li	a5,2
 1230              	#APP
 1231              	# 64 "src/InterruptHandler.cpp" 1
 1232              		csrc sip, a5
 1233              	# 0 "" 2
 1234              	#NO_APP
 1235              	.LBE28:
 1236 0664 6FF05FF0 		j	.L37
 1237              	.L50:
 1238              	.LBB32:
 1239              	.LBB31:
 1240              	.LBB30:
  55:src/InterruptHandler.cpp ****                 uint64 volatile sepc;
 1241              		.loc 1 55 17 is_stmt 1
  56:src/InterruptHandler.cpp ****                 uint64 volatile sstatus;
 1242              		.loc 1 56 17
  57:src/InterruptHandler.cpp ****                 __asm__ volatile("csrr %0, sepc" : "=r" (sepc)); // sepc
 1243              		.loc 1 57 17
  57:src/InterruptHandler.cpp ****                 __asm__ volatile("csrr %0, sepc" : "=r" (sepc)); // sepc
 1244              		.loc 1 57 64 is_stmt 0
 1245              	#APP
 1246              	# 57 "src/InterruptHandler.cpp" 1
 1247              		csrr a5, sepc
 1248              	# 0 "" 2
 1249              	#NO_APP
 1250 066c 2334F4FC 		sd	a5,-56(s0)
  58:src/InterruptHandler.cpp ****                 __asm__ volatile("csrr %0, sstatus" : "=r" (sstatus)); // sstatus_r
 1251              		.loc 1 58 17 is_stmt 1
GAS LISTING /tmp/ccs4yEhA.s 			page 33


  58:src/InterruptHandler.cpp ****                 __asm__ volatile("csrr %0, sstatus" : "=r" (sstatus)); // sstatus_r
 1252              		.loc 1 58 70 is_stmt 0
 1253              	#APP
 1254              	# 58 "src/InterruptHandler.cpp" 1
 1255              		csrr a5, sstatus
 1256              	# 0 "" 2
 1257              	#NO_APP
 1258 0674 2338F4FC 		sd	a5,-48(s0)
  59:src/InterruptHandler.cpp ****                 Nit::dispatch();
 1259              		.loc 1 59 17 is_stmt 1
  59:src/InterruptHandler.cpp ****                 Nit::dispatch();
 1260              		.loc 1 59 30 is_stmt 0
 1261 0678 97000000 		call	_ZN3Nit8dispatchEv@plt
 1261      E7800000 
 1262              	.LVL29:
  60:src/InterruptHandler.cpp ****                 __asm__ volatile("csrw sepc, %0" : : "r" (sepc)); // sepc_w
 1263              		.loc 1 60 17 is_stmt 1
  60:src/InterruptHandler.cpp ****                 __asm__ volatile("csrw sepc, %0" : : "r" (sepc)); // sepc_w
 1264              		.loc 1 60 59 is_stmt 0
 1265 0680 833784FC 		ld	a5,-56(s0)
  60:src/InterruptHandler.cpp ****                 __asm__ volatile("csrw sepc, %0" : : "r" (sepc)); // sepc_w
 1266              		.loc 1 60 65
 1267              	#APP
 1268              	# 60 "src/InterruptHandler.cpp" 1
  61:src/InterruptHandler.cpp ****                 __asm__ volatile("csrw sstatus, %0" : : "r" (sstatus)); // sstatus_w
 1269              		csrw sepc, a5
 1270              	# 0 "" 2
 1271              		.loc 1 61 17 is_stmt 1
  61:src/InterruptHandler.cpp ****                 __asm__ volatile("csrw sstatus, %0" : : "r" (sstatus)); // sstatus_w
 1272              		.loc 1 61 62 is_stmt 0
 1273              	#NO_APP
 1274 0688 833704FD 		ld	a5,-48(s0)
  61:src/InterruptHandler.cpp ****                 __asm__ volatile("csrw sstatus, %0" : : "r" (sstatus)); // sstatus_w
 1275              		.loc 1 61 71
 1276              	#APP
 1277              	# 61 "src/InterruptHandler.cpp" 1
  62:src/InterruptHandler.cpp ****                 Nit::tajmer = 0;
 1278              		csrw sstatus, a5
 1279              	# 0 "" 2
 1280              		.loc 1 62 17 is_stmt 1
  62:src/InterruptHandler.cpp ****                 Nit::tajmer = 0;
 1281              		.loc 1 62 29 is_stmt 0
 1282              	#NO_APP
 1283 0690 23A00400 		sw	zero,0(s1)
 1284              	.LBE30:
 1285 0694 6FF09FFC 		j	.L42
 1286              	.LVL30:
 1287              	.L49:
 1288              	.LBE31:
 1289              	.LBE32:
 1290              	.LBB33:
 1291              	.LBB26:
  68:src/InterruptHandler.cpp ****             int volatile h = plic_claim();
 1292              		.loc 1 68 13 is_stmt 1
  68:src/InterruptHandler.cpp ****             int volatile h = plic_claim();
 1293              		.loc 1 68 40 is_stmt 0
 1294 0698 97000000 		call	plic_claim@plt
GAS LISTING /tmp/ccs4yEhA.s 			page 34


 1294      E7800000 
 1295              	.LVL31:
  68:src/InterruptHandler.cpp ****             int volatile h = plic_claim();
 1296              		.loc 1 68 41
 1297 06a0 232EA4FA 		sw	a0,-68(s0)
  69:src/InterruptHandler.cpp ****             if(h==CONSOLE_IRQ){
 1298              		.loc 1 69 13 is_stmt 1
  69:src/InterruptHandler.cpp ****             if(h==CONSOLE_IRQ){
 1299              		.loc 1 69 17 is_stmt 0
 1300 06a4 8327C4FB 		lw	a5,-68(s0)
 1301 06a8 9B870700 		sext.w	a5,a5
  69:src/InterruptHandler.cpp ****             if(h==CONSOLE_IRQ){
 1302              		.loc 1 69 13
 1303 06ac 1307A000 		li	a4,10
 1304 06b0 638AE700 		beq	a5,a4,.L45
 1305              	.L44:
  74:src/InterruptHandler.cpp ****             plic_complete(CONSOLE_IRQ);
 1306              		.loc 1 74 13 is_stmt 1
  74:src/InterruptHandler.cpp ****             plic_complete(CONSOLE_IRQ);
 1307              		.loc 1 74 26 is_stmt 0
 1308 06b4 1305A000 		li	a0,10
 1309 06b8 97000000 		call	plic_complete@plt
 1309      E7800000 
 1310              	.LVL32:
 1311              	.LBE26:
 1312 06c0 6FF09FEA 		j	.L37
 1313              	.L45:
 1314              	.LBB27:
  70:src/InterruptHandler.cpp ****                 while(*(uint8*)CONSOLE_STATUS & CONSOLE_RX_STATUS_BIT){
 1315              		.loc 1 70 17 is_stmt 1
  70:src/InterruptHandler.cpp ****                 while(*(uint8*)CONSOLE_STATUS & CONSOLE_RX_STATUS_BIT){
 1316              		.loc 1 70 49
  70:src/InterruptHandler.cpp ****                 while(*(uint8*)CONSOLE_STATUS & CONSOLE_RX_STATUS_BIT){
 1317              		.loc 1 70 23 is_stmt 0
 1318 06c4 97070000 		la	a5,CONSOLE_STATUS
 1318      83B70700 
 1319 06cc 83B70700 		ld	a5,0(a5)
 1320 06d0 83C70700 		lbu	a5,0(a5)
  70:src/InterruptHandler.cpp ****                 while(*(uint8*)CONSOLE_STATUS & CONSOLE_RX_STATUS_BIT){
 1321              		.loc 1 70 49
 1322 06d4 93F71700 		andi	a5,a5,1
 1323 06d8 E38E07FC 		beqz	a5,.L44
  71:src/InterruptHandler.cpp ****                     Konzola::putulaz(*(char*)CONSOLE_RX_DATA);
 1324              		.loc 1 71 21 is_stmt 1
  71:src/InterruptHandler.cpp ****                     Konzola::putulaz(*(char*)CONSOLE_RX_DATA);
 1325              		.loc 1 71 38 is_stmt 0
 1326 06dc 97070000 		la	a5,CONSOLE_RX_DATA
 1326      83B70700 
 1327 06e4 83B70700 		ld	a5,0(a5)
  71:src/InterruptHandler.cpp ****                     Konzola::putulaz(*(char*)CONSOLE_RX_DATA);
 1328              		.loc 1 71 37
 1329 06e8 03C50700 		lbu	a0,0(a5)
 1330 06ec 97000000 		call	_ZN7Konzola7putulazEi@plt
 1330      E7800000 
 1331              	.LVL33:
  70:src/InterruptHandler.cpp ****                 while(*(uint8*)CONSOLE_STATUS & CONSOLE_RX_STATUS_BIT){
 1332              		.loc 1 70 17
GAS LISTING /tmp/ccs4yEhA.s 			page 35


 1333 06f4 6FF01FFD 		j	.L45
 1334              	.LBE27:
 1335              	.LBE33:
 1336              	.LBE35:
 1337              	.LBE38:
 1338              		.cfi_endproc
 1339              	.LFE23:
 1341              		.bss
 1342              		.align	3
 1343              		.set	.LANCHOR0,. + 0
 1346              	_ZL10scauseFlag:
 1347 0000 00       		.zero	1
 1348 0001 00000000 		.zero	7
 1348      000000
 1351              	_ZL9functions:
 1352 0008 00000000 		.zero	4000
 1352      00000000 
 1352      00000000 
 1352      00000000 
 1352      00000000 
 1353              		.text
 1354              	.Letext0:
 1355              		.file 3 "src/../h/../lib/hw.h"
 1356              		.file 4 "src/../h/_KernelMemory.h"
 1357              		.file 5 "src/../h/_KernelThreadControlBlock.h"
 1358              		.file 6 "src/../h/../h/list.h"
 1359              		.file 7 "src/../h/_KernelScheduler.h"
 1360              		.file 8 "src/../h/_KernelBuffer.h"
 1361              		.file 9 "src/../h/_KernelConsole.h"
 1362              		.file 10 "src/../test/../h/syscall_c.h"
 1363              		.file 11 "src/../test/printing.hpp"
 1364              		.file 12 "<built-in>"
GAS LISTING /tmp/ccs4yEhA.s 			page 36


DEFINED SYMBOLS
                            *ABS*:0000000000000000 InterruptHandler.cpp
     /tmp/ccs4yEhA.s:8      .text:0000000000000000 _ZL14initializationv
     /tmp/ccs4yEhA.s:12     .text:0000000000000000 .L0 
     /tmp/ccs4yEhA.s:13     .text:0000000000000000 .L0 
     /tmp/ccs4yEhA.s:14     .text:0000000000000004 .L0 
     /tmp/ccs4yEhA.s:16     .text:0000000000000008 .L0 
     /tmp/ccs4yEhA.s:18     .text:000000000000000c .L0 
     /tmp/ccs4yEhA.s:20     .text:000000000000000c .L0 
     /tmp/ccs4yEhA.s:1351   .bss:0000000000000008 _ZL9functions
     /tmp/ccs4yEhA.s:21     .text:000000000000000c .L0 
     /tmp/ccs4yEhA.s:240    .text:0000000000000180 _Z10mem__allocv
     /tmp/ccs4yEhA.s:25     .text:0000000000000020 .L0 
     /tmp/ccs4yEhA.s:390    .text:0000000000000230 _Z9mem__freev
     /tmp/ccs4yEhA.s:26     .text:0000000000000020 .L0 
     /tmp/ccs4yEhA.s:29     .text:000000000000002c .L0 
     /tmp/ccs4yEhA.s:430    .text:000000000000025c _Z14thread__createv
     /tmp/ccs4yEhA.s:30     .text:000000000000002c .L0 
     /tmp/ccs4yEhA.s:33     .text:0000000000000038 .L0 
     /tmp/ccs4yEhA.s:135    .text:00000000000000fc _Z12thread__exitv
     /tmp/ccs4yEhA.s:34     .text:0000000000000038 .L0 
     /tmp/ccs4yEhA.s:37     .text:0000000000000044 .L0 
     /tmp/ccs4yEhA.s:173    .text:0000000000000138 _Z16thread__dispatchv
     /tmp/ccs4yEhA.s:38     .text:0000000000000044 .L0 
     /tmp/ccs4yEhA.s:41     .text:0000000000000050 .L0 
     /tmp/ccs4yEhA.s:528    .text:00000000000002cc _Z12thread__joinv
     /tmp/ccs4yEhA.s:42     .text:0000000000000050 .L0 
     /tmp/ccs4yEhA.s:45     .text:000000000000005c .L0 
     /tmp/ccs4yEhA.s:280    .text:00000000000001ac _Z9sem__openv
     /tmp/ccs4yEhA.s:46     .text:000000000000005c .L0 
     /tmp/ccs4yEhA.s:49     .text:0000000000000068 .L0 
     /tmp/ccs4yEhA.s:628    .text:0000000000000338 _Z10sem__closev
     /tmp/ccs4yEhA.s:50     .text:0000000000000068 .L0 
     /tmp/ccs4yEhA.s:53     .text:0000000000000074 .L0 
     /tmp/ccs4yEhA.s:678    .text:0000000000000374 _Z9sem__waitv
     /tmp/ccs4yEhA.s:54     .text:0000000000000074 .L0 
     /tmp/ccs4yEhA.s:57     .text:0000000000000080 .L0 
     /tmp/ccs4yEhA.s:778    .text:00000000000003f0 _Z11sem__signalv
     /tmp/ccs4yEhA.s:58     .text:0000000000000080 .L0 
     /tmp/ccs4yEhA.s:61     .text:000000000000008c .L0 
     /tmp/ccs4yEhA.s:819    .text:0000000000000424 _Z11time__sleepv
     /tmp/ccs4yEhA.s:62     .text:000000000000008c .L0 
     /tmp/ccs4yEhA.s:65     .text:0000000000000098 .L0 
     /tmp/ccs4yEhA.s:861    .text:0000000000000454 _Z5getc_v
     /tmp/ccs4yEhA.s:66     .text:0000000000000098 .L0 
     /tmp/ccs4yEhA.s:69     .text:00000000000000a4 .L0 
     /tmp/ccs4yEhA.s:935    .text:00000000000004a0 _Z5putc_v
     /tmp/ccs4yEhA.s:70     .text:00000000000000a4 .L0 
     /tmp/ccs4yEhA.s:73     .text:00000000000000b0 .L0 
     /tmp/ccs4yEhA.s:89     .text:00000000000000c8 _Z7promenav
     /tmp/ccs4yEhA.s:74     .text:00000000000000b0 .L0 
     /tmp/ccs4yEhA.s:77     .text:00000000000000bc .L0 
     /tmp/ccs4yEhA.s:78     .text:00000000000000c0 .L0 
     /tmp/ccs4yEhA.s:79     .text:00000000000000c0 .L0 
     /tmp/ccs4yEhA.s:81     .text:00000000000000c4 .L0 
     /tmp/ccs4yEhA.s:83     .text:00000000000000c8 .L0 
     /tmp/ccs4yEhA.s:92     .text:00000000000000c8 .L0 
GAS LISTING /tmp/ccs4yEhA.s 			page 37


     /tmp/ccs4yEhA.s:93     .text:00000000000000c8 .L0 
     /tmp/ccs4yEhA.s:94     .text:00000000000000cc .L0 
     /tmp/ccs4yEhA.s:96     .text:00000000000000d0 .L0 
     /tmp/ccs4yEhA.s:98     .text:00000000000000d4 .L0 
     /tmp/ccs4yEhA.s:100    .text:00000000000000d4 .L0 
     /tmp/ccs4yEhA.s:101    .text:00000000000000d4 .L0 
src/InterruptHandler.cpp:241    .text:00000000000000d4 .L0 
     /tmp/ccs4yEhA.s:109    .text:00000000000000dc .L0 
     /tmp/ccs4yEhA.s:110    .text:00000000000000dc .L0 
     /tmp/ccs4yEhA.s:114    .text:00000000000000e8 .L0 
     /tmp/ccs4yEhA.s:115    .text:00000000000000e8 .L0 
src/InterruptHandler.cpp:243    .text:00000000000000ec .L0 
     /tmp/ccs4yEhA.s:123    .text:00000000000000f0 .L0 
     /tmp/ccs4yEhA.s:124    .text:00000000000000f4 .L0 
     /tmp/ccs4yEhA.s:125    .text:00000000000000f4 .L0 
     /tmp/ccs4yEhA.s:127    .text:00000000000000f8 .L0 
     /tmp/ccs4yEhA.s:129    .text:00000000000000fc .L0 
     /tmp/ccs4yEhA.s:138    .text:00000000000000fc .L0 
     /tmp/ccs4yEhA.s:139    .text:00000000000000fc .L0 
     /tmp/ccs4yEhA.s:140    .text:0000000000000100 .L0 
     /tmp/ccs4yEhA.s:143    .text:0000000000000108 .L0 
     /tmp/ccs4yEhA.s:144    .text:0000000000000108 .L0 
     /tmp/ccs4yEhA.s:146    .text:000000000000010c .L0 
     /tmp/ccs4yEhA.s:148    .text:000000000000010c .L0 
     /tmp/ccs4yEhA.s:149    .text:000000000000010c .L0 
     /tmp/ccs4yEhA.s:152    .text:0000000000000118 .L0 
     /tmp/ccs4yEhA.s:155    .text:0000000000000120 .L0 
     /tmp/ccs4yEhA.s:156    .text:0000000000000120 .L0 
     /tmp/ccs4yEhA.s:159    .text:0000000000000128 .L0 
     /tmp/ccs4yEhA.s:160    .text:000000000000012c .L0 
     /tmp/ccs4yEhA.s:162    .text:0000000000000130 .L0 
     /tmp/ccs4yEhA.s:163    .text:0000000000000130 .L0 
     /tmp/ccs4yEhA.s:165    .text:0000000000000134 .L0 
     /tmp/ccs4yEhA.s:167    .text:0000000000000138 .L0 
     /tmp/ccs4yEhA.s:176    .text:0000000000000138 .L0 
     /tmp/ccs4yEhA.s:177    .text:0000000000000138 .L0 
     /tmp/ccs4yEhA.s:178    .text:000000000000013c .L0 
     /tmp/ccs4yEhA.s:181    .text:0000000000000144 .L0 
     /tmp/ccs4yEhA.s:182    .text:0000000000000144 .L0 
     /tmp/ccs4yEhA.s:184    .text:0000000000000148 .L0 
     /tmp/ccs4yEhA.s:186    .text:0000000000000148 .L0 
     /tmp/ccs4yEhA.s:187    .text:0000000000000148 .L0 
     /tmp/ccs4yEhA.s:188    .text:0000000000000148 .L0 
src/InterruptHandler.cpp:143    .text:0000000000000148 .L0 
     /tmp/ccs4yEhA.s:196    .text:0000000000000150 .L0 
src/InterruptHandler.cpp:144    .text:0000000000000150 .L0 
     /tmp/ccs4yEhA.s:204    .text:0000000000000158 .L0 
     /tmp/ccs4yEhA.s:205    .text:0000000000000158 .L0 
     /tmp/ccs4yEhA.s:208    .text:0000000000000160 .L0 
     /tmp/ccs4yEhA.s:209    .text:0000000000000160 .L0 
src/InterruptHandler.cpp:146    .text:0000000000000164 .L0 
     /tmp/ccs4yEhA.s:216    .text:0000000000000168 .L0 
     /tmp/ccs4yEhA.s:218    .text:0000000000000168 .L0 
src/InterruptHandler.cpp:147    .text:000000000000016c .L0 
     /tmp/ccs4yEhA.s:226    .text:0000000000000170 .L0 
     /tmp/ccs4yEhA.s:227    .text:0000000000000174 .L0 
     /tmp/ccs4yEhA.s:229    .text:0000000000000178 .L0 
GAS LISTING /tmp/ccs4yEhA.s 			page 38


     /tmp/ccs4yEhA.s:230    .text:0000000000000178 .L0 
     /tmp/ccs4yEhA.s:232    .text:000000000000017c .L0 
     /tmp/ccs4yEhA.s:234    .text:0000000000000180 .L0 
     /tmp/ccs4yEhA.s:243    .text:0000000000000180 .L0 
     /tmp/ccs4yEhA.s:244    .text:0000000000000180 .L0 
     /tmp/ccs4yEhA.s:245    .text:0000000000000184 .L0 
     /tmp/ccs4yEhA.s:248    .text:000000000000018c .L0 
     /tmp/ccs4yEhA.s:249    .text:000000000000018c .L0 
     /tmp/ccs4yEhA.s:251    .text:0000000000000190 .L0 
     /tmp/ccs4yEhA.s:253    .text:0000000000000190 .L0 
     /tmp/ccs4yEhA.s:254    .text:0000000000000190 .L0 
src/InterruptHandler.cpp:111    .text:0000000000000190 .L0 
     /tmp/ccs4yEhA.s:261    .text:0000000000000194 .L0 
     /tmp/ccs4yEhA.s:263    .text:0000000000000194 .L0 
     /tmp/ccs4yEhA.s:266    .text:000000000000019c .L0 
     /tmp/ccs4yEhA.s:267    .text:00000000000001a0 .L0 
     /tmp/ccs4yEhA.s:269    .text:00000000000001a4 .L0 
     /tmp/ccs4yEhA.s:270    .text:00000000000001a4 .L0 
     /tmp/ccs4yEhA.s:272    .text:00000000000001a8 .L0 
     /tmp/ccs4yEhA.s:274    .text:00000000000001ac .L0 
     /tmp/ccs4yEhA.s:283    .text:00000000000001ac .L0 
     /tmp/ccs4yEhA.s:284    .text:00000000000001ac .L0 
     /tmp/ccs4yEhA.s:285    .text:00000000000001b0 .L0 
     /tmp/ccs4yEhA.s:289    .text:00000000000001bc .L0 
     /tmp/ccs4yEhA.s:290    .text:00000000000001bc .L0 
     /tmp/ccs4yEhA.s:291    .text:00000000000001bc .L0 
     /tmp/ccs4yEhA.s:293    .text:00000000000001c0 .L0 
     /tmp/ccs4yEhA.s:295    .text:00000000000001c0 .L0 
     /tmp/ccs4yEhA.s:296    .text:00000000000001c0 .L0 
     /tmp/ccs4yEhA.s:297    .text:00000000000001c0 .L0 
src/InterruptHandler.cpp:167    .text:00000000000001c0 .L0 
     /tmp/ccs4yEhA.s:305    .text:00000000000001c8 .L0 
src/InterruptHandler.cpp:168    .text:00000000000001c8 .L0 
     /tmp/ccs4yEhA.s:313    .text:00000000000001d0 .L0 
     /tmp/ccs4yEhA.s:314    .text:00000000000001d0 .L0 
     /tmp/ccs4yEhA.s:321    .text:00000000000001d8 .L0 
     /tmp/ccs4yEhA.s:322    .text:00000000000001d8 .L0 
     /tmp/ccs4yEhA.s:330    .text:00000000000001e4 .L0 
     /tmp/ccs4yEhA.s:338    .text:00000000000001f4 .L0 
     /tmp/ccs4yEhA.s:340    .text:00000000000001f8 .L0 
     /tmp/ccs4yEhA.s:343    .text:00000000000001fc .L0 
     /tmp/ccs4yEhA.s:344    .text:00000000000001fc .L0 
     /tmp/ccs4yEhA.s:346    .text:0000000000000200 .L0 
     /tmp/ccs4yEhA.s:348    .text:0000000000000204 .L0 
     /tmp/ccs4yEhA.s:352    .text:0000000000000208 .L0 
     /tmp/ccs4yEhA.s:353    .text:000000000000020c .L0 
     /tmp/ccs4yEhA.s:354    .text:000000000000020c .L0 
     /tmp/ccs4yEhA.s:356    .text:0000000000000210 .L0 
     /tmp/ccs4yEhA.s:357    .text:0000000000000210 .L0 
     /tmp/ccs4yEhA.s:359    .text:0000000000000214 .L0 
     /tmp/ccs4yEhA.s:361    .text:0000000000000218 .L0 
     /tmp/ccs4yEhA.s:364    .text:000000000000021c .L0 
     /tmp/ccs4yEhA.s:368    .text:000000000000021c .L0 
     /tmp/ccs4yEhA.s:369    .text:000000000000021c .L0 
     /tmp/ccs4yEhA.s:372    .text:0000000000000224 .L0 
     /tmp/ccs4yEhA.s:373    .text:0000000000000224 .L0 
src/InterruptHandler.cpp:172    .text:0000000000000228 .L0 
GAS LISTING /tmp/ccs4yEhA.s 			page 39


     /tmp/ccs4yEhA.s:383    .text:000000000000022c .L0 
     /tmp/ccs4yEhA.s:384    .text:0000000000000230 .L0 
     /tmp/ccs4yEhA.s:393    .text:0000000000000230 .L0 
     /tmp/ccs4yEhA.s:394    .text:0000000000000230 .L0 
     /tmp/ccs4yEhA.s:395    .text:0000000000000234 .L0 
     /tmp/ccs4yEhA.s:398    .text:000000000000023c .L0 
     /tmp/ccs4yEhA.s:399    .text:000000000000023c .L0 
     /tmp/ccs4yEhA.s:401    .text:0000000000000240 .L0 
     /tmp/ccs4yEhA.s:403    .text:0000000000000240 .L0 
     /tmp/ccs4yEhA.s:404    .text:0000000000000240 .L0 
src/InterruptHandler.cpp:116    .text:0000000000000240 .L0 
     /tmp/ccs4yEhA.s:411    .text:0000000000000244 .L0 
     /tmp/ccs4yEhA.s:413    .text:0000000000000244 .L0 
     /tmp/ccs4yEhA.s:416    .text:000000000000024c .L0 
     /tmp/ccs4yEhA.s:417    .text:0000000000000250 .L0 
     /tmp/ccs4yEhA.s:419    .text:0000000000000254 .L0 
     /tmp/ccs4yEhA.s:420    .text:0000000000000254 .L0 
     /tmp/ccs4yEhA.s:422    .text:0000000000000258 .L0 
     /tmp/ccs4yEhA.s:424    .text:000000000000025c .L0 
     /tmp/ccs4yEhA.s:433    .text:000000000000025c .L0 
     /tmp/ccs4yEhA.s:434    .text:000000000000025c .L0 
     /tmp/ccs4yEhA.s:435    .text:0000000000000260 .L0 
     /tmp/ccs4yEhA.s:439    .text:000000000000026c .L0 
     /tmp/ccs4yEhA.s:440    .text:000000000000026c .L0 
     /tmp/ccs4yEhA.s:441    .text:000000000000026c .L0 
     /tmp/ccs4yEhA.s:443    .text:0000000000000270 .L0 
     /tmp/ccs4yEhA.s:445    .text:0000000000000270 .L0 
     /tmp/ccs4yEhA.s:446    .text:0000000000000270 .L0 
     /tmp/ccs4yEhA.s:447    .text:0000000000000270 .L0 
     /tmp/ccs4yEhA.s:448    .text:0000000000000270 .L0 
src/InterruptHandler.cpp:124    .text:0000000000000270 .L0 
     /tmp/ccs4yEhA.s:456    .text:0000000000000278 .L0 
src/InterruptHandler.cpp:125    .text:0000000000000278 .L0 
     /tmp/ccs4yEhA.s:463    .text:000000000000027c .L0 
src/InterruptHandler.cpp:126    .text:000000000000027c .L0 
     /tmp/ccs4yEhA.s:470    .text:0000000000000284 .L0 
     /tmp/ccs4yEhA.s:471    .text:0000000000000284 .L0 
     /tmp/ccs4yEhA.s:473    .text:0000000000000288 .L0 
     /tmp/ccs4yEhA.s:475    .text:000000000000028c .L0 
     /tmp/ccs4yEhA.s:478    .text:0000000000000294 .L0 
     /tmp/ccs4yEhA.s:481    .text:0000000000000298 .L0 
     /tmp/ccs4yEhA.s:482    .text:0000000000000298 .L0 
     /tmp/ccs4yEhA.s:484    .text:000000000000029c .L0 
     /tmp/ccs4yEhA.s:486    .text:00000000000002a0 .L0 
     /tmp/ccs4yEhA.s:490    .text:00000000000002a4 .L0 
     /tmp/ccs4yEhA.s:491    .text:00000000000002a8 .L0 
     /tmp/ccs4yEhA.s:492    .text:00000000000002a8 .L0 
     /tmp/ccs4yEhA.s:494    .text:00000000000002ac .L0 
     /tmp/ccs4yEhA.s:495    .text:00000000000002ac .L0 
     /tmp/ccs4yEhA.s:497    .text:00000000000002b0 .L0 
     /tmp/ccs4yEhA.s:499    .text:00000000000002b4 .L0 
     /tmp/ccs4yEhA.s:502    .text:00000000000002b8 .L0 
     /tmp/ccs4yEhA.s:506    .text:00000000000002b8 .L0 
     /tmp/ccs4yEhA.s:507    .text:00000000000002b8 .L0 
     /tmp/ccs4yEhA.s:510    .text:00000000000002c0 .L0 
     /tmp/ccs4yEhA.s:511    .text:00000000000002c0 .L0 
src/InterruptHandler.cpp:132    .text:00000000000002c4 .L0 
GAS LISTING /tmp/ccs4yEhA.s 			page 40


     /tmp/ccs4yEhA.s:521    .text:00000000000002c8 .L0 
     /tmp/ccs4yEhA.s:522    .text:00000000000002cc .L0 
     /tmp/ccs4yEhA.s:531    .text:00000000000002cc .L0 
     /tmp/ccs4yEhA.s:532    .text:00000000000002cc .L0 
     /tmp/ccs4yEhA.s:533    .text:00000000000002d0 .L0 
     /tmp/ccs4yEhA.s:536    .text:00000000000002d8 .L0 
     /tmp/ccs4yEhA.s:537    .text:00000000000002d8 .L0 
     /tmp/ccs4yEhA.s:539    .text:00000000000002dc .L0 
     /tmp/ccs4yEhA.s:541    .text:00000000000002dc .L0 
     /tmp/ccs4yEhA.s:542    .text:00000000000002dc .L0 
src/InterruptHandler.cpp:151    .text:00000000000002dc .L0 
     /tmp/ccs4yEhA.s:551    .text:00000000000002e4 .L0 
     /tmp/ccs4yEhA.s:552    .text:00000000000002e4 .L0 
     /tmp/ccs4yEhA.s:554    .text:00000000000002e8 .L0 
     /tmp/ccs4yEhA.s:556    .text:00000000000002ec .L0 
     /tmp/ccs4yEhA.s:558    .text:00000000000002f0 .L0 
     /tmp/ccs4yEhA.s:560    .text:00000000000002f4 .L0 
     /tmp/ccs4yEhA.s:564    .text:00000000000002f8 .L0 
     /tmp/ccs4yEhA.s:565    .text:00000000000002fc .L0 
     /tmp/ccs4yEhA.s:566    .text:00000000000002fc .L0 
     /tmp/ccs4yEhA.s:568    .text:0000000000000300 .L0 
     /tmp/ccs4yEhA.s:569    .text:0000000000000300 .L0 
     /tmp/ccs4yEhA.s:571    .text:0000000000000304 .L0 
     /tmp/ccs4yEhA.s:574    .text:0000000000000308 .L0 
     /tmp/ccs4yEhA.s:578    .text:0000000000000308 .L0 
     /tmp/ccs4yEhA.s:579    .text:0000000000000308 .L0 
     /tmp/ccs4yEhA.s:580    .text:0000000000000308 .L0 
src/InterruptHandler.cpp:156    .text:0000000000000308 .L0 
     /tmp/ccs4yEhA.s:588    .text:0000000000000310 .L0 
src/InterruptHandler.cpp:157    .text:0000000000000310 .L0 
     /tmp/ccs4yEhA.s:596    .text:0000000000000318 .L0 
     /tmp/ccs4yEhA.s:597    .text:0000000000000318 .L0 
     /tmp/ccs4yEhA.s:601    .text:0000000000000324 .L0 
     /tmp/ccs4yEhA.s:602    .text:0000000000000324 .L0 
src/InterruptHandler.cpp:159    .text:0000000000000328 .L0 
     /tmp/ccs4yEhA.s:609    .text:000000000000032c .L0 
     /tmp/ccs4yEhA.s:611    .text:000000000000032c .L0 
src/InterruptHandler.cpp:160    .text:0000000000000330 .L0 
     /tmp/ccs4yEhA.s:621    .text:0000000000000334 .L0 
     /tmp/ccs4yEhA.s:622    .text:0000000000000338 .L0 
     /tmp/ccs4yEhA.s:631    .text:0000000000000338 .L0 
     /tmp/ccs4yEhA.s:632    .text:0000000000000338 .L0 
     /tmp/ccs4yEhA.s:633    .text:000000000000033c .L0 
     /tmp/ccs4yEhA.s:636    .text:0000000000000344 .L0 
     /tmp/ccs4yEhA.s:637    .text:0000000000000344 .L0 
     /tmp/ccs4yEhA.s:639    .text:0000000000000348 .L0 
     /tmp/ccs4yEhA.s:641    .text:0000000000000348 .L0 
     /tmp/ccs4yEhA.s:642    .text:0000000000000348 .L0 
src/InterruptHandler.cpp:177    .text:0000000000000348 .L0 
     /tmp/ccs4yEhA.s:650    .text:0000000000000350 .L0 
     /tmp/ccs4yEhA.s:651    .text:0000000000000350 .L0 
     /tmp/ccs4yEhA.s:655    .text:000000000000035c .L0 
     /tmp/ccs4yEhA.s:656    .text:000000000000035c .L0 
     /tmp/ccs4yEhA.s:657    .text:000000000000035c .L0 
     /tmp/ccs4yEhA.s:664    .text:0000000000000364 .L0 
     /tmp/ccs4yEhA.s:665    .text:0000000000000368 .L0 
     /tmp/ccs4yEhA.s:667    .text:000000000000036c .L0 
GAS LISTING /tmp/ccs4yEhA.s 			page 41


     /tmp/ccs4yEhA.s:668    .text:000000000000036c .L0 
     /tmp/ccs4yEhA.s:670    .text:0000000000000370 .L0 
     /tmp/ccs4yEhA.s:672    .text:0000000000000374 .L0 
     /tmp/ccs4yEhA.s:681    .text:0000000000000374 .L0 
     /tmp/ccs4yEhA.s:682    .text:0000000000000374 .L0 
     /tmp/ccs4yEhA.s:683    .text:0000000000000378 .L0 
     /tmp/ccs4yEhA.s:686    .text:0000000000000380 .L0 
     /tmp/ccs4yEhA.s:687    .text:0000000000000380 .L0 
     /tmp/ccs4yEhA.s:689    .text:0000000000000384 .L0 
     /tmp/ccs4yEhA.s:691    .text:0000000000000384 .L0 
     /tmp/ccs4yEhA.s:692    .text:0000000000000384 .L0 
src/InterruptHandler.cpp:186    .text:0000000000000384 .L0 
     /tmp/ccs4yEhA.s:700    .text:000000000000038c .L0 
     /tmp/ccs4yEhA.s:701    .text:000000000000038c .L0 
     /tmp/ccs4yEhA.s:702    .text:000000000000038c .L0 
     /tmp/ccs4yEhA.s:706    .text:0000000000000398 .L0 
     /tmp/ccs4yEhA.s:708    .text:000000000000039c .L0 
     /tmp/ccs4yEhA.s:709    .text:000000000000039c .L0 
     /tmp/ccs4yEhA.s:710    .text:000000000000039c .L0 
src/InterruptHandler.cpp:194    .text:000000000000039c .L0 
     /tmp/ccs4yEhA.s:718    .text:00000000000003a4 .L0 
src/InterruptHandler.cpp:195    .text:00000000000003a4 .L0 
     /tmp/ccs4yEhA.s:726    .text:00000000000003ac .L0 
     /tmp/ccs4yEhA.s:727    .text:00000000000003ac .L0 
     /tmp/ccs4yEhA.s:730    .text:00000000000003b4 .L0 
     /tmp/ccs4yEhA.s:731    .text:00000000000003b4 .L0 
src/InterruptHandler.cpp:197    .text:00000000000003b8 .L0 
     /tmp/ccs4yEhA.s:738    .text:00000000000003bc .L0 
     /tmp/ccs4yEhA.s:740    .text:00000000000003bc .L0 
src/InterruptHandler.cpp:198    .text:00000000000003c0 .L0 
     /tmp/ccs4yEhA.s:747    .text:00000000000003c4 .L0 
     /tmp/ccs4yEhA.s:749    .text:00000000000003c4 .L0 
     /tmp/ccs4yEhA.s:753    .text:00000000000003d4 .L0 
     /tmp/ccs4yEhA.s:755    .text:00000000000003d8 .L0 
     /tmp/ccs4yEhA.s:756    .text:00000000000003d8 .L0 
src/InterruptHandler.cpp:201    .text:00000000000003dc .L0 
     /tmp/ccs4yEhA.s:764    .text:00000000000003e0 .L0 
     /tmp/ccs4yEhA.s:765    .text:00000000000003e4 .L0 
     /tmp/ccs4yEhA.s:767    .text:00000000000003e8 .L0 
     /tmp/ccs4yEhA.s:768    .text:00000000000003e8 .L0 
     /tmp/ccs4yEhA.s:770    .text:00000000000003ec .L0 
     /tmp/ccs4yEhA.s:772    .text:00000000000003f0 .L0 
     /tmp/ccs4yEhA.s:781    .text:00000000000003f0 .L0 
     /tmp/ccs4yEhA.s:782    .text:00000000000003f0 .L0 
     /tmp/ccs4yEhA.s:783    .text:00000000000003f4 .L0 
     /tmp/ccs4yEhA.s:786    .text:00000000000003fc .L0 
     /tmp/ccs4yEhA.s:787    .text:00000000000003fc .L0 
     /tmp/ccs4yEhA.s:789    .text:0000000000000400 .L0 
     /tmp/ccs4yEhA.s:791    .text:0000000000000400 .L0 
     /tmp/ccs4yEhA.s:792    .text:0000000000000400 .L0 
src/InterruptHandler.cpp:205    .text:0000000000000400 .L0 
     /tmp/ccs4yEhA.s:800    .text:0000000000000408 .L0 
     /tmp/ccs4yEhA.s:801    .text:0000000000000408 .L0 
     /tmp/ccs4yEhA.s:805    .text:0000000000000414 .L0 
     /tmp/ccs4yEhA.s:806    .text:0000000000000418 .L0 
     /tmp/ccs4yEhA.s:808    .text:000000000000041c .L0 
     /tmp/ccs4yEhA.s:809    .text:000000000000041c .L0 
GAS LISTING /tmp/ccs4yEhA.s 			page 42


     /tmp/ccs4yEhA.s:811    .text:0000000000000420 .L0 
     /tmp/ccs4yEhA.s:813    .text:0000000000000424 .L0 
     /tmp/ccs4yEhA.s:822    .text:0000000000000424 .L0 
     /tmp/ccs4yEhA.s:823    .text:0000000000000424 .L0 
     /tmp/ccs4yEhA.s:824    .text:0000000000000428 .L0 
     /tmp/ccs4yEhA.s:827    .text:0000000000000430 .L0 
     /tmp/ccs4yEhA.s:828    .text:0000000000000430 .L0 
     /tmp/ccs4yEhA.s:830    .text:0000000000000434 .L0 
     /tmp/ccs4yEhA.s:832    .text:0000000000000434 .L0 
     /tmp/ccs4yEhA.s:833    .text:0000000000000434 .L0 
src/InterruptHandler.cpp:210    .text:0000000000000434 .L0 
     /tmp/ccs4yEhA.s:840    .text:0000000000000438 .L0 
     /tmp/ccs4yEhA.s:842    .text:0000000000000438 .L0 
     /tmp/ccs4yEhA.s:847    .text:0000000000000444 .L0 
     /tmp/ccs4yEhA.s:848    .text:0000000000000448 .L0 
     /tmp/ccs4yEhA.s:850    .text:000000000000044c .L0 
     /tmp/ccs4yEhA.s:851    .text:000000000000044c .L0 
     /tmp/ccs4yEhA.s:853    .text:0000000000000450 .L0 
     /tmp/ccs4yEhA.s:855    .text:0000000000000454 .L0 
     /tmp/ccs4yEhA.s:864    .text:0000000000000454 .L0 
     /tmp/ccs4yEhA.s:865    .text:0000000000000454 .L0 
     /tmp/ccs4yEhA.s:866    .text:0000000000000458 .L0 
     /tmp/ccs4yEhA.s:869    .text:0000000000000460 .L0 
     /tmp/ccs4yEhA.s:870    .text:0000000000000460 .L0 
     /tmp/ccs4yEhA.s:872    .text:0000000000000464 .L0 
     /tmp/ccs4yEhA.s:874    .text:0000000000000464 .L0 
     /tmp/ccs4yEhA.s:875    .text:0000000000000464 .L0 
     /tmp/ccs4yEhA.s:876    .text:0000000000000464 .L0 
src/InterruptHandler.cpp:216    .text:0000000000000464 .L0 
     /tmp/ccs4yEhA.s:884    .text:000000000000046c .L0 
src/InterruptHandler.cpp:217    .text:000000000000046c .L0 
     /tmp/ccs4yEhA.s:892    .text:0000000000000474 .L0 
     /tmp/ccs4yEhA.s:893    .text:0000000000000474 .L0 
     /tmp/ccs4yEhA.s:896    .text:000000000000047c .L0 
src/InterruptHandler.cpp:220    .text:000000000000047c .L0 
     /tmp/ccs4yEhA.s:902    .text:0000000000000480 .L0 
     /tmp/ccs4yEhA.s:904    .text:0000000000000480 .L0 
src/InterruptHandler.cpp:222    .text:0000000000000484 .L0 
     /tmp/ccs4yEhA.s:911    .text:0000000000000488 .L0 
     /tmp/ccs4yEhA.s:913    .text:0000000000000488 .L0 
src/InterruptHandler.cpp:223    .text:000000000000048c .L0 
     /tmp/ccs4yEhA.s:921    .text:0000000000000490 .L0 
     /tmp/ccs4yEhA.s:922    .text:0000000000000494 .L0 
     /tmp/ccs4yEhA.s:924    .text:0000000000000498 .L0 
     /tmp/ccs4yEhA.s:925    .text:0000000000000498 .L0 
     /tmp/ccs4yEhA.s:927    .text:000000000000049c .L0 
     /tmp/ccs4yEhA.s:929    .text:00000000000004a0 .L0 
     /tmp/ccs4yEhA.s:938    .text:00000000000004a0 .L0 
     /tmp/ccs4yEhA.s:939    .text:00000000000004a0 .L0 
     /tmp/ccs4yEhA.s:940    .text:00000000000004a4 .L0 
     /tmp/ccs4yEhA.s:943    .text:00000000000004ac .L0 
     /tmp/ccs4yEhA.s:944    .text:00000000000004ac .L0 
     /tmp/ccs4yEhA.s:946    .text:00000000000004b0 .L0 
     /tmp/ccs4yEhA.s:948    .text:00000000000004b0 .L0 
     /tmp/ccs4yEhA.s:949    .text:00000000000004b0 .L0 
     /tmp/ccs4yEhA.s:950    .text:00000000000004b0 .L0 
     /tmp/ccs4yEhA.s:951    .text:00000000000004b0 .L0 
GAS LISTING /tmp/ccs4yEhA.s 			page 43


src/InterruptHandler.cpp:229    .text:00000000000004b0 .L0 
     /tmp/ccs4yEhA.s:959    .text:00000000000004b8 .L0 
src/InterruptHandler.cpp:230    .text:00000000000004b8 .L0 
     /tmp/ccs4yEhA.s:967    .text:00000000000004c0 .L0 
src/InterruptHandler.cpp:231    .text:00000000000004c0 .L0 
     /tmp/ccs4yEhA.s:975    .text:00000000000004c8 .L0 
     /tmp/ccs4yEhA.s:976    .text:00000000000004c8 .L0 
     /tmp/ccs4yEhA.s:981    .text:00000000000004d8 .L0 
     /tmp/ccs4yEhA.s:982    .text:00000000000004d8 .L0 
src/InterruptHandler.cpp:236    .text:00000000000004dc .L0 
     /tmp/ccs4yEhA.s:989    .text:00000000000004e0 .L0 
     /tmp/ccs4yEhA.s:991    .text:00000000000004e0 .L0 
src/InterruptHandler.cpp:237    .text:00000000000004e4 .L0 
     /tmp/ccs4yEhA.s:999    .text:00000000000004e8 .L0 
     /tmp/ccs4yEhA.s:1000   .text:00000000000004ec .L0 
     /tmp/ccs4yEhA.s:1002   .text:00000000000004f0 .L0 
     /tmp/ccs4yEhA.s:1003   .text:00000000000004f0 .L0 
     /tmp/ccs4yEhA.s:1005   .text:00000000000004f4 .L0 
     /tmp/ccs4yEhA.s:1007   .text:00000000000004f8 .L0 
     /tmp/ccs4yEhA.s:1021   .text:00000000000004f8 handle
     /tmp/ccs4yEhA.s:1024   .text:00000000000004f8 .L0 
     /tmp/ccs4yEhA.s:1025   .text:00000000000004f8 .L0 
     /tmp/ccs4yEhA.s:1026   .text:00000000000004fc .L0 
     /tmp/ccs4yEhA.s:1030   .text:0000000000000508 .L0 
     /tmp/ccs4yEhA.s:1031   .text:0000000000000508 .L0 
     /tmp/ccs4yEhA.s:1032   .text:0000000000000508 .L0 
     /tmp/ccs4yEhA.s:1034   .text:000000000000050c .L0 
     /tmp/ccs4yEhA.s:1036   .text:000000000000050c .L0 
     /tmp/ccs4yEhA.s:1037   .text:000000000000050c .L0 
     /tmp/ccs4yEhA.s:1039   .text:0000000000000514 .L0 
     /tmp/ccs4yEhA.s:1042   .text:0000000000000518 .L0 
     /tmp/ccs4yEhA.s:1043   .text:0000000000000518 .L0 
src/InterruptHandler.cpp:35     .text:0000000000000518 .L0 
     /tmp/ccs4yEhA.s:1052   .text:0000000000000520 .L0 
     /tmp/ccs4yEhA.s:1053   .text:0000000000000520 .L0 
     /tmp/ccs4yEhA.s:1055   .text:0000000000000524 .L0 
     /tmp/ccs4yEhA.s:1057   .text:0000000000000528 .L0 
     /tmp/ccs4yEhA.s:1059   .text:000000000000052c .L0 
     /tmp/ccs4yEhA.s:1061   .text:0000000000000530 .L0 
     /tmp/ccs4yEhA.s:1064   .text:0000000000000534 .L0 
src/InterruptHandler.cpp:38     .text:0000000000000534 .L0 
     /tmp/ccs4yEhA.s:1070   .text:0000000000000538 .L0 
src/InterruptHandler.cpp:39     .text:0000000000000538 .L0 
     /tmp/ccs4yEhA.s:1075   .text:000000000000053c .L0 
src/InterruptHandler.cpp:40     .text:000000000000053c .L0 
     /tmp/ccs4yEhA.s:1080   .text:0000000000000540 .L0 
     /tmp/ccs4yEhA.s:1081   .text:0000000000000540 .L0 
src/InterruptHandler.cpp:42     .text:0000000000000540 .L0 
     /tmp/ccs4yEhA.s:1088   .text:0000000000000548 .L0 
     /tmp/ccs4yEhA.s:1089   .text:0000000000000548 .L0 
     /tmp/ccs4yEhA.s:1091   .text:000000000000054c .L0 
     /tmp/ccs4yEhA.s:1096   .text:0000000000000560 .L0 
     /tmp/ccs4yEhA.s:1099   .text:0000000000000564 .L0 
src/InterruptHandler.cpp:45     .text:0000000000000564 .L0 
     /tmp/ccs4yEhA.s:1109   .text:0000000000000568 .L0 
     /tmp/ccs4yEhA.s:1110   .text:000000000000056c .L0 
     /tmp/ccs4yEhA.s:1111   .text:000000000000056c .L0 
GAS LISTING /tmp/ccs4yEhA.s 			page 44


     /tmp/ccs4yEhA.s:1113   .text:0000000000000570 .L0 
     /tmp/ccs4yEhA.s:1114   .text:0000000000000570 .L0 
     /tmp/ccs4yEhA.s:1116   .text:0000000000000574 .L0 
     /tmp/ccs4yEhA.s:1118   .text:0000000000000578 .L0 
     /tmp/ccs4yEhA.s:1121   .text:000000000000057c .L0 
     /tmp/ccs4yEhA.s:1123   .text:000000000000057c .L0 
     /tmp/ccs4yEhA.s:1124   .text:000000000000057c .L0 
     /tmp/ccs4yEhA.s:1131   .text:0000000000000588 .L0 
     /tmp/ccs4yEhA.s:1132   .text:0000000000000588 .L0 
     /tmp/ccs4yEhA.s:1134   .text:000000000000058c .L0 
     /tmp/ccs4yEhA.s:1144   .text:000000000000059c .L0 
     /tmp/ccs4yEhA.s:1145   .text:000000000000059c .L0 
     /tmp/ccs4yEhA.s:1147   .text:00000000000005a0 .L0 
     /tmp/ccs4yEhA.s:1152   .text:00000000000005b0 .L0 
     /tmp/ccs4yEhA.s:1153   .text:00000000000005b0 .L0 
     /tmp/ccs4yEhA.s:1155   .text:00000000000005b4 .L0 
     /tmp/ccs4yEhA.s:1160   .text:00000000000005c4 .L0 
     /tmp/ccs4yEhA.s:1161   .text:00000000000005c4 .L0 
     /tmp/ccs4yEhA.s:1163   .text:00000000000005cc .L0 
     /tmp/ccs4yEhA.s:1165   .text:00000000000005d0 .L0 
     /tmp/ccs4yEhA.s:1166   .text:00000000000005d0 .L0 
     /tmp/ccs4yEhA.s:1170   .text:00000000000005e0 .L0 
     /tmp/ccs4yEhA.s:1171   .text:00000000000005e0 .L0 
     /tmp/ccs4yEhA.s:1173   .text:00000000000005e4 .L0 
     /tmp/ccs4yEhA.s:1179   .text:00000000000005f8 .L0 
     /tmp/ccs4yEhA.s:1180   .text:00000000000005f8 .L0 
     /tmp/ccs4yEhA.s:1184   .text:0000000000000608 .L0 
     /tmp/ccs4yEhA.s:1185   .text:0000000000000608 .L0 
     /tmp/ccs4yEhA.s:1187   .text:000000000000060c .L0 
     /tmp/ccs4yEhA.s:1193   .text:0000000000000620 .L0 
     /tmp/ccs4yEhA.s:1194   .text:0000000000000620 .L0 
     /tmp/ccs4yEhA.s:1200   .text:000000000000062c .L0 
     /tmp/ccs4yEhA.s:1207   .text:0000000000000630 .L0 
     /tmp/ccs4yEhA.s:1208   .text:0000000000000630 .L0 
     /tmp/ccs4yEhA.s:1209   .text:0000000000000630 .L0 
     /tmp/ccs4yEhA.s:1214   .text:0000000000000644 .L0 
     /tmp/ccs4yEhA.s:1215   .text:0000000000000644 .L0 
     /tmp/ccs4yEhA.s:1220   .text:0000000000000650 .L0 
     /tmp/ccs4yEhA.s:1221   .text:0000000000000650 .L0 
     /tmp/ccs4yEhA.s:1223   .text:0000000000000654 .L0 
     /tmp/ccs4yEhA.s:1228   .text:000000000000065c .L0 
     /tmp/ccs4yEhA.s:1229   .text:000000000000065c .L0 
     /tmp/ccs4yEhA.s:1242   .text:0000000000000668 .L0 
     /tmp/ccs4yEhA.s:1243   .text:0000000000000668 .L0 
     /tmp/ccs4yEhA.s:1244   .text:0000000000000668 .L0 
src/InterruptHandler.cpp:57     .text:0000000000000668 .L0 
     /tmp/ccs4yEhA.s:1252   .text:0000000000000670 .L0 
src/InterruptHandler.cpp:58     .text:0000000000000670 .L0 
     /tmp/ccs4yEhA.s:1260   .text:0000000000000678 .L0 
     /tmp/ccs4yEhA.s:1261   .text:0000000000000678 .L0 
     /tmp/ccs4yEhA.s:1264   .text:0000000000000680 .L0 
     /tmp/ccs4yEhA.s:1265   .text:0000000000000680 .L0 
src/InterruptHandler.cpp:60     .text:0000000000000684 .L0 
     /tmp/ccs4yEhA.s:1272   .text:0000000000000688 .L0 
     /tmp/ccs4yEhA.s:1274   .text:0000000000000688 .L0 
src/InterruptHandler.cpp:61     .text:000000000000068c .L0 
     /tmp/ccs4yEhA.s:1281   .text:0000000000000690 .L0 
GAS LISTING /tmp/ccs4yEhA.s 			page 45


     /tmp/ccs4yEhA.s:1283   .text:0000000000000690 .L0 
     /tmp/ccs4yEhA.s:1293   .text:0000000000000698 .L0 
     /tmp/ccs4yEhA.s:1294   .text:0000000000000698 .L0 
     /tmp/ccs4yEhA.s:1297   .text:00000000000006a0 .L0 
     /tmp/ccs4yEhA.s:1299   .text:00000000000006a4 .L0 
     /tmp/ccs4yEhA.s:1300   .text:00000000000006a4 .L0 
     /tmp/ccs4yEhA.s:1303   .text:00000000000006ac .L0 
     /tmp/ccs4yEhA.s:1307   .text:00000000000006b4 .L0 
     /tmp/ccs4yEhA.s:1308   .text:00000000000006b4 .L0 
     /tmp/ccs4yEhA.s:1316   .text:00000000000006c4 .L0 
     /tmp/ccs4yEhA.s:1317   .text:00000000000006c4 .L0 
     /tmp/ccs4yEhA.s:1318   .text:00000000000006c4 .L0 
     /tmp/ccs4yEhA.s:1322   .text:00000000000006d4 .L0 
     /tmp/ccs4yEhA.s:1325   .text:00000000000006dc .L0 
     /tmp/ccs4yEhA.s:1326   .text:00000000000006dc .L0 
     /tmp/ccs4yEhA.s:1329   .text:00000000000006e8 .L0 
     /tmp/ccs4yEhA.s:1333   .text:00000000000006f4 .L0 
     /tmp/ccs4yEhA.s:1338   .text:00000000000006f8 .L0 
     /tmp/ccs4yEhA.s:1343   .bss:0000000000000000 .LANCHOR0
     /tmp/ccs4yEhA.s:1346   .bss:0000000000000000 _ZL10scauseFlag
     /tmp/ccs4yEhA.s:1365   .text:00000000000006f8 .L0 
     /tmp/ccs4yEhA.s:21     .text:000000000000000c .L0 
     /tmp/ccs4yEhA.s:22     .text:0000000000000014 .L0 
     /tmp/ccs4yEhA.s:26     .text:0000000000000020 .L0 
     /tmp/ccs4yEhA.s:30     .text:000000000000002c .L0 
     /tmp/ccs4yEhA.s:34     .text:0000000000000038 .L0 
     /tmp/ccs4yEhA.s:38     .text:0000000000000044 .L0 
     /tmp/ccs4yEhA.s:42     .text:0000000000000050 .L0 
     /tmp/ccs4yEhA.s:46     .text:000000000000005c .L0 
     /tmp/ccs4yEhA.s:50     .text:0000000000000068 .L0 
     /tmp/ccs4yEhA.s:54     .text:0000000000000074 .L0 
     /tmp/ccs4yEhA.s:58     .text:0000000000000080 .L0 
     /tmp/ccs4yEhA.s:62     .text:000000000000008c .L0 
     /tmp/ccs4yEhA.s:66     .text:0000000000000098 .L0 
     /tmp/ccs4yEhA.s:70     .text:00000000000000a4 .L0 
     /tmp/ccs4yEhA.s:74     .text:00000000000000b0 .L0 
     /tmp/ccs4yEhA.s:149    .text:000000000000010c .L0 
     /tmp/ccs4yEhA.s:749    .text:00000000000003c4 .L0 
     /tmp/ccs4yEhA.s:1037   .text:000000000000050c .L0 
     /tmp/ccs4yEhA.s:1092   .text:0000000000000550 .L0 
     /tmp/ccs4yEhA.s:1161   .text:00000000000005c4 .L0 
     /tmp/ccs4yEhA.s:1012   .rodata.str1.8:0000000000000000 .LC0
     /tmp/ccs4yEhA.s:1166   .text:00000000000005d0 .L0 
     /tmp/ccs4yEhA.s:1015   .rodata.str1.8:0000000000000008 .LC1
     /tmp/ccs4yEhA.s:1180   .text:00000000000005f8 .L0 
     /tmp/ccs4yEhA.s:1195   .text:0000000000000624 .L0 
     /tmp/ccs4yEhA.s:1209   .text:0000000000000630 .L0 
     /tmp/ccs4yEhA.s:1318   .text:00000000000006c4 .L0 
     /tmp/ccs4yEhA.s:1326   .text:00000000000006dc .L0 
     /tmp/ccs4yEhA.s:363    .text:000000000000021c .L14
     /tmp/ccs4yEhA.s:349    .text:0000000000000208 .L11
     /tmp/ccs4yEhA.s:501    .text:00000000000002b8 .L20
     /tmp/ccs4yEhA.s:487    .text:00000000000002a4 .L17
     /tmp/ccs4yEhA.s:561    .text:00000000000002f8 .L21
     /tmp/ccs4yEhA.s:573    .text:0000000000000308 .L24
     /tmp/ccs4yEhA.s:1120   .text:000000000000057c .L47
     /tmp/ccs4yEhA.s:1127   .text:0000000000000588 .L39
GAS LISTING /tmp/ccs4yEhA.s 			page 46


     /tmp/ccs4yEhA.s:1040   .text:0000000000000518 .L38
     /tmp/ccs4yEhA.s:1201   .text:0000000000000630 .L48
     /tmp/ccs4yEhA.s:1287   .text:0000000000000698 .L49
     /tmp/ccs4yEhA.s:1105   .text:0000000000000568 .L37
     /tmp/ccs4yEhA.s:1237   .text:0000000000000668 .L50
     /tmp/ccs4yEhA.s:1225   .text:000000000000065c .L42
     /tmp/ccs4yEhA.s:1313   .text:00000000000006c4 .L45
     /tmp/ccs4yEhA.s:1305   .text:00000000000006b4 .L44
     /tmp/ccs4yEhA.s:3352   .debug_abbrev:0000000000000000 .Ldebug_abbrev0
     /tmp/ccs4yEhA.s:4974   .debug_str:0000000000000819 .LASF172
     /tmp/ccs4yEhA.s:4894   .debug_str:000000000000060c .LASF173
     /tmp/ccs4yEhA.s:4690   .debug_str:000000000000009c .LASF174
     /tmp/ccs4yEhA.s:5      .text:0000000000000000 .Ltext0
     /tmp/ccs4yEhA.s:1354   .text:00000000000006f8 .Letext0
     /tmp/ccs4yEhA.s:4664   .debug_line:0000000000000000 .Ldebug_line0
     /tmp/ccs4yEhA.s:4790   .debug_str:000000000000034d .LASF0
     /tmp/ccs4yEhA.s:4820   .debug_str:000000000000041d .LASF1
     /tmp/ccs4yEhA.s:4920   .debug_str:00000000000006b0 .LASF2
     /tmp/ccs4yEhA.s:4742   .debug_str:00000000000001fd .LASF3
     /tmp/ccs4yEhA.s:4928   .debug_str:00000000000006ec .LASF4
     /tmp/ccs4yEhA.s:4800   .debug_str:00000000000003a8 .LASF5
     /tmp/ccs4yEhA.s:4674   .debug_str:000000000000002f .LASF6
     /tmp/ccs4yEhA.s:4896   .debug_str:0000000000000625 .LASF7
     /tmp/ccs4yEhA.s:4886   .debug_str:00000000000005d6 .LASF8
     /tmp/ccs4yEhA.s:4810   .debug_str:00000000000003e5 .LASF9
     /tmp/ccs4yEhA.s:4764   .debug_str:00000000000002a4 .LASF10
     /tmp/ccs4yEhA.s:4772   .debug_str:00000000000002e8 .LASF11
     /tmp/ccs4yEhA.s:4708   .debug_str:0000000000000136 .LASF12
     /tmp/ccs4yEhA.s:4752   .debug_str:0000000000000234 .LASF13
     /tmp/ccs4yEhA.s:4724   .debug_str:0000000000000193 .LASF14
     /tmp/ccs4yEhA.s:4706   .debug_str:0000000000000126 .LASF15
     /tmp/ccs4yEhA.s:4960   .debug_str:00000000000007d6 .LASF16
     /tmp/ccs4yEhA.s:4736   .debug_str:00000000000001db .LASF17
     /tmp/ccs4yEhA.s:4952   .debug_str:00000000000007a7 .LASF18
     /tmp/ccs4yEhA.s:4748   .debug_str:000000000000021d .LASF26
     /tmp/ccs4yEhA.s:5026   .debug_str:0000000000000a63 .LASF80
     /tmp/ccs4yEhA.s:4710   .debug_str:0000000000000145 .LASF19
     /tmp/ccs4yEhA.s:4684   .debug_str:000000000000006a .LASF20
     /tmp/ccs4yEhA.s:4818   .debug_str:0000000000000418 .LASF21
     /tmp/ccs4yEhA.s:4948   .debug_str:0000000000000791 .LASF22
     /tmp/ccs4yEhA.s:4758   .debug_str:000000000000025b .LASF24
     /tmp/ccs4yEhA.s:4838   .debug_str:0000000000000494 .LASF23
     /tmp/ccs4yEhA.s:4844   .debug_str:00000000000004b7 .LASF25
     /tmp/ccs4yEhA.s:4670   .debug_str:000000000000001f .LASF43
     /tmp/ccs4yEhA.s:4942   .debug_str:000000000000075a .LASF45
     /tmp/ccs4yEhA.s:4786   .debug_str:0000000000000338 .LASF55
     /tmp/ccs4yEhA.s:4984   .debug_str:0000000000000902 .LASF57
     /tmp/ccs4yEhA.s:4958   .debug_str:00000000000007d1 .LASF29
     /tmp/ccs4yEhA.s:4744   .debug_str:0000000000000203 .LASF27
     /tmp/ccs4yEhA.s:4972   .debug_str:0000000000000811 .LASF28
     /tmp/ccs4yEhA.s:4874   .debug_str:000000000000058b .LASF30
     /tmp/ccs4yEhA.s:4950   .debug_str:000000000000079e .LASF31
     /tmp/ccs4yEhA.s:4862   .debug_str:0000000000000547 .LASF32
     /tmp/ccs4yEhA.s:5028   .debug_str:0000000000000a6d .LASF33
     /tmp/ccs4yEhA.s:5002   .debug_str:0000000000000993 .LASF34
     /tmp/ccs4yEhA.s:4696   .debug_str:00000000000000cd .LASF35
     /tmp/ccs4yEhA.s:4996   .debug_str:000000000000095a .LASF36
GAS LISTING /tmp/ccs4yEhA.s 			page 47


     /tmp/ccs4yEhA.s:4792   .debug_str:000000000000035a .LASF37
     /tmp/ccs4yEhA.s:4680   .debug_str:0000000000000057 .LASF39
     /tmp/ccs4yEhA.s:4746   .debug_str:000000000000020a .LASF38
     /tmp/ccs4yEhA.s:4760   .debug_str:0000000000000279 .LASF40
     /tmp/ccs4yEhA.s:5032   .debug_str:0000000000000a91 .LASF41
     /tmp/ccs4yEhA.s:4926   .debug_str:00000000000006cd .LASF42
     /tmp/ccs4yEhA.s:4668   .debug_str:000000000000001a .LASF175
     /tmp/ccs4yEhA.s:4730   .debug_str:00000000000001bb .LASF44
     /tmp/ccs4yEhA.s:4754   .debug_str:0000000000000243 .LASF46
     /tmp/ccs4yEhA.s:4970   .debug_str:000000000000080c .LASF47
     /tmp/ccs4yEhA.s:4796   .debug_str:0000000000000387 .LASF48
     /tmp/ccs4yEhA.s:4932   .debug_str:00000000000006fd .LASF49
     /tmp/ccs4yEhA.s:5010   .debug_str:00000000000009cb .LASF50
     /tmp/ccs4yEhA.s:4812   .debug_str:00000000000003f8 .LASF51
     /tmp/ccs4yEhA.s:4922   .debug_str:00000000000006be .LASF52
     /tmp/ccs4yEhA.s:4692   .debug_str:00000000000000b7 .LASF53
     /tmp/ccs4yEhA.s:4966   .debug_str:0000000000000800 .LASF54
     /tmp/ccs4yEhA.s:4860   .debug_str:0000000000000533 .LASF176
     /tmp/ccs4yEhA.s:4956   .debug_str:00000000000007cb .LASF56
     /tmp/ccs4yEhA.s:4866   .debug_str:0000000000000558 .LASF58
     /tmp/ccs4yEhA.s:4992   .debug_str:000000000000094e .LASF59
     /tmp/ccs4yEhA.s:4882   .debug_str:00000000000005b9 .LASF60
     /tmp/ccs4yEhA.s:4930   .debug_str:00000000000006f3 .LASF61
     /tmp/ccs4yEhA.s:4994   .debug_str:0000000000000955 .LASF177
     /tmp/ccs4yEhA.s:4868   .debug_str:0000000000000568 .LASF62
     /tmp/ccs4yEhA.s:4916   .debug_str:0000000000000694 .LASF63
     /tmp/ccs4yEhA.s:4910   .debug_str:0000000000000671 .LASF64
     /tmp/ccs4yEhA.s:5030   .debug_str:0000000000000a7a .LASF70
     /tmp/ccs4yEhA.s:4924   .debug_str:00000000000006c3 .LASF178
     /tmp/ccs4yEhA.s:4880   .debug_str:00000000000005a2 .LASF179
     /tmp/ccs4yEhA.s:4814   .debug_str:0000000000000401 .LASF65
     /tmp/ccs4yEhA.s:4704   .debug_str:0000000000000109 .LASF66
     /tmp/ccs4yEhA.s:4836   .debug_str:000000000000048c .LASF67
     /tmp/ccs4yEhA.s:5024   .debug_str:0000000000000a47 .LASF68
     /tmp/ccs4yEhA.s:4884   .debug_str:00000000000005ca .LASF69
     /tmp/ccs4yEhA.s:4762   .debug_str:0000000000000286 .LASF71
     /tmp/ccs4yEhA.s:5034   .debug_str:0000000000000a9d .LASF72
     /tmp/ccs4yEhA.s:4766   .debug_str:00000000000002b4 .LASF73
     /tmp/ccs4yEhA.s:4938   .debug_str:000000000000073b .LASF74
     /tmp/ccs4yEhA.s:4936   .debug_str:000000000000071e .LASF75
     /tmp/ccs4yEhA.s:4906   .debug_str:0000000000000661 .LASF76
     /tmp/ccs4yEhA.s:4666   .debug_str:0000000000000000 .LASF77
     /tmp/ccs4yEhA.s:4842   .debug_str:00000000000004b2 .LASF78
     /tmp/ccs4yEhA.s:4872   .debug_str:0000000000000583 .LASF79
     /tmp/ccs4yEhA.s:4702   .debug_str:00000000000000f9 .LASF81
     /tmp/ccs4yEhA.s:4694   .debug_str:00000000000000bd .LASF82
     /tmp/ccs4yEhA.s:4934   .debug_str:000000000000070d .LASF83
     /tmp/ccs4yEhA.s:5004   .debug_str:000000000000099f .LASF84
     /tmp/ccs4yEhA.s:5018   .debug_str:0000000000000a0d .LASF85
     /tmp/ccs4yEhA.s:4732   .debug_str:00000000000001c4 .LASF86
     /tmp/ccs4yEhA.s:4854   .debug_str:000000000000050f .LASF87
     /tmp/ccs4yEhA.s:4964   .debug_str:00000000000007f9 .LASF88
     /tmp/ccs4yEhA.s:4990   .debug_str:0000000000000939 .LASF89
     /tmp/ccs4yEhA.s:4682   .debug_str:0000000000000064 .LASF90
     /tmp/ccs4yEhA.s:4840   .debug_str:000000000000049e .LASF91
     /tmp/ccs4yEhA.s:4824   .debug_str:000000000000043a .LASF92
     /tmp/ccs4yEhA.s:4806   .debug_str:00000000000003d1 .LASF93
GAS LISTING /tmp/ccs4yEhA.s 			page 48


     /tmp/ccs4yEhA.s:4850   .debug_str:00000000000004e9 .LASF109
     /tmp/ccs4yEhA.s:5022   .debug_str:0000000000000a33 .LASF180
     /tmp/ccs4yEhA.s:4954   .debug_str:00000000000007bd .LASF94
     /tmp/ccs4yEhA.s:4686   .debug_str:000000000000006f .LASF95
     /tmp/ccs4yEhA.s:4726   .debug_str:00000000000001a3 .LASF96
     /tmp/ccs4yEhA.s:4794   .debug_str:000000000000036a .LASF97
     /tmp/ccs4yEhA.s:4714   .debug_str:0000000000000154 .LASF98
     /tmp/ccs4yEhA.s:5014   .debug_str:00000000000009ec .LASF99
     /tmp/ccs4yEhA.s:4870   .debug_str:000000000000056d .LASF100
     /tmp/ccs4yEhA.s:4898   .debug_str:000000000000062c .LASF101
     /tmp/ccs4yEhA.s:4788   .debug_str:0000000000000347 .LASF102
     /tmp/ccs4yEhA.s:4980   .debug_str:00000000000008f5 .LASF103
     /tmp/ccs4yEhA.s:4988   .debug_str:000000000000092a .LASF104
     /tmp/ccs4yEhA.s:4852   .debug_str:0000000000000501 .LASF105
     /tmp/ccs4yEhA.s:4822   .debug_str:0000000000000430 .LASF106
     /tmp/ccs4yEhA.s:4864   .debug_str:000000000000054e .LASF107
     /tmp/ccs4yEhA.s:4902   .debug_str:000000000000064a .LASF108
     /tmp/ccs4yEhA.s:5008   .debug_str:00000000000009bb .LASF110
     /tmp/ccs4yEhA.s:4676   .debug_str:0000000000000036 .LASF181
     /tmp/ccs4yEhA.s:4908   .debug_str:000000000000066a .LASF111
     /tmp/ccs4yEhA.s:4978   .debug_str:00000000000008e2 .LASF112
     /tmp/ccs4yEhA.s:4782   .debug_str:0000000000000326 .LASF113
     /tmp/ccs4yEhA.s:4944   .debug_str:000000000000076f .LASF114
     /tmp/ccs4yEhA.s:4804   .debug_str:00000000000003c7 .LASF115
     /tmp/ccs4yEhA.s:4672   .debug_str:0000000000000025 .LASF116
     /tmp/ccs4yEhA.s:4904   .debug_str:0000000000000658 .LASF117
     /tmp/ccs4yEhA.s:5000   .debug_str:000000000000097c .LASF119
     /tmp/ccs4yEhA.s:4912   .debug_str:0000000000000684 .LASF118
     /tmp/ccs4yEhA.s:4946   .debug_str:000000000000077a .LASF120
     /tmp/ccs4yEhA.s:4878   .debug_str:000000000000059a .LASF121
     /tmp/ccs4yEhA.s:5020   .debug_str:0000000000000a1d .LASF122
     /tmp/ccs4yEhA.s:4716   .debug_str:0000000000000159 .LASF123
     /tmp/ccs4yEhA.s:4998   .debug_str:0000000000000966 .LASF124
     /tmp/ccs4yEhA.s:4986   .debug_str:0000000000000921 .LASF125
     /tmp/ccs4yEhA.s:4962   .debug_str:00000000000007e2 .LASF126
     /tmp/ccs4yEhA.s:4826   .debug_str:000000000000044e .LASF127
     /tmp/ccs4yEhA.s:4918   .debug_str:0000000000000699 .LASF128
     /tmp/ccs4yEhA.s:4808   .debug_str:00000000000003db .LASF129
     /tmp/ccs4yEhA.s:4834   .debug_str:0000000000000481 .LASF130
     /tmp/ccs4yEhA.s:4876   .debug_str:0000000000000592 .LASF131
     /tmp/ccs4yEhA.s:4698   .debug_str:00000000000000dd .LASF132
     /tmp/ccs4yEhA.s:90     .text:00000000000000c8 .LFB38
     /tmp/ccs4yEhA.s:130    .text:00000000000000fc .LFE38
     /tmp/ccs4yEhA.s:4778   .debug_str:000000000000030e .LASF133
     /tmp/ccs4yEhA.s:4738   .debug_str:00000000000001f1 .LASF134
     /tmp/ccs4yEhA.s:4768   .debug_str:00000000000002cf .LASF135
     /tmp/ccs4yEhA.s:936    .text:00000000000004a0 .LFB37
     /tmp/ccs4yEhA.s:1008   .text:00000000000004f8 .LFE37
     /tmp/ccs4yEhA.s:4976   .debug_str:00000000000008dd .LASF136
     /tmp/ccs4yEhA.s:979    .text:00000000000004d8 .LVL20
     /tmp/ccs4yEhA.s:4968   .debug_str:0000000000000807 .LASF137
     /tmp/ccs4yEhA.s:4740   .debug_str:00000000000001f7 .LASF138
     /tmp/ccs4yEhA.s:4846   .debug_str:00000000000004d0 .LASF139
     /tmp/ccs4yEhA.s:862    .text:0000000000000454 .LFB36
     /tmp/ccs4yEhA.s:930    .text:00000000000004a0 .LFE36
     /tmp/ccs4yEhA.s:894    .text:000000000000047c .LVL19
     /tmp/ccs4yEhA.s:4728   .debug_str:00000000000001af .LASF140
GAS LISTING /tmp/ccs4yEhA.s 			page 49


     /tmp/ccs4yEhA.s:4830   .debug_str:0000000000000462 .LASF141
     /tmp/ccs4yEhA.s:820    .text:0000000000000424 .LFB35
     /tmp/ccs4yEhA.s:856    .text:0000000000000454 .LFE35
     /tmp/ccs4yEhA.s:4579   .debug_loc:0000000000000000 .LLST6
     /tmp/ccs4yEhA.s:845    .text:0000000000000444 .LVL18
     /tmp/ccs4yEhA.s:4890   .debug_str:00000000000005f2 .LASF142
     /tmp/ccs4yEhA.s:4900   .debug_str:0000000000000639 .LASF143
     /tmp/ccs4yEhA.s:779    .text:00000000000003f0 .LFB34
     /tmp/ccs4yEhA.s:814    .text:0000000000000424 .LFE34
     /tmp/ccs4yEhA.s:803    .text:0000000000000414 .LVL15
     /tmp/ccs4yEhA.s:4712   .debug_str:000000000000014a .LASF144
     /tmp/ccs4yEhA.s:4750   .debug_str:0000000000000226 .LASF145
     /tmp/ccs4yEhA.s:679    .text:0000000000000374 .LFB33
     /tmp/ccs4yEhA.s:773    .text:00000000000003f0 .LFE33
     /tmp/ccs4yEhA.s:704    .text:0000000000000398 .LVL13
     /tmp/ccs4yEhA.s:728    .text:00000000000003b4 .LVL14
     /tmp/ccs4yEhA.s:5006   .debug_str:00000000000009b0 .LASF146
     /tmp/ccs4yEhA.s:4700   .debug_str:00000000000000e9 .LASF147
     /tmp/ccs4yEhA.s:629    .text:0000000000000338 .LFB32
     /tmp/ccs4yEhA.s:673    .text:0000000000000374 .LFE32
     /tmp/ccs4yEhA.s:653    .text:000000000000035c .LVL12
     /tmp/ccs4yEhA.s:4784   .debug_str:000000000000032e .LASF148
     /tmp/ccs4yEhA.s:4832   .debug_str:0000000000000473 .LASF149
     /tmp/ccs4yEhA.s:281    .text:00000000000001ac .LFB31
     /tmp/ccs4yEhA.s:385    .text:0000000000000230 .LFE31
     /tmp/ccs4yEhA.s:4856   .debug_str:0000000000000522 .LASF150
     /tmp/ccs4yEhA.s:366    .text:000000000000021c .LBB14
     /tmp/ccs4yEhA.s:380    .text:000000000000022c .LBE14
     /tmp/ccs4yEhA.s:317    .text:00000000000001d8 .LBB9
     /tmp/ccs4yEhA.s:326    .text:00000000000001e4 .LBE9
     /tmp/ccs4yEhA.s:4586   .debug_loc:0000000000000023 .LLST1
     /tmp/ccs4yEhA.s:324    .text:00000000000001e4 .LVL5
     /tmp/ccs4yEhA.s:327    .text:00000000000001e4 .LBB11
     /tmp/ccs4yEhA.s:336    .text:00000000000001f4 .LBE11
     /tmp/ccs4yEhA.s:4594   .debug_loc:0000000000000047 .LLST2
     /tmp/ccs4yEhA.s:4601   .debug_loc:000000000000006a .LLST3
     /tmp/ccs4yEhA.s:4802   .debug_str:00000000000003ba .LASF151
     /tmp/ccs4yEhA.s:4734   .debug_str:00000000000001c9 .LASF152
     /tmp/ccs4yEhA.s:529    .text:00000000000002cc .LFB30
     /tmp/ccs4yEhA.s:623    .text:0000000000000338 .LFE30
     /tmp/ccs4yEhA.s:4914   .debug_str:000000000000068d .LASF153
     /tmp/ccs4yEhA.s:576    .text:0000000000000308 .LBB20
     /tmp/ccs4yEhA.s:618    .text:0000000000000334 .LBE20
     /tmp/ccs4yEhA.s:599    .text:0000000000000324 .LVL11
     /tmp/ccs4yEhA.s:4678   .debug_str:0000000000000046 .LASF154
     /tmp/ccs4yEhA.s:5012   .debug_str:00000000000009d6 .LASF155
     /tmp/ccs4yEhA.s:174    .text:0000000000000138 .LFB29
     /tmp/ccs4yEhA.s:235    .text:0000000000000180 .LFE29
     /tmp/ccs4yEhA.s:206    .text:0000000000000160 .LVL1
     /tmp/ccs4yEhA.s:4776   .debug_str:0000000000000301 .LASF156
     /tmp/ccs4yEhA.s:4798   .debug_str:0000000000000396 .LASF157
     /tmp/ccs4yEhA.s:136    .text:00000000000000fc .LFB28
     /tmp/ccs4yEhA.s:168    .text:0000000000000138 .LFE28
     /tmp/ccs4yEhA.s:157    .text:0000000000000128 .LVL0
     /tmp/ccs4yEhA.s:4848   .debug_str:00000000000004da .LASF158
     /tmp/ccs4yEhA.s:4940   .debug_str:0000000000000746 .LASF159
     /tmp/ccs4yEhA.s:431    .text:000000000000025c .LFB27
GAS LISTING /tmp/ccs4yEhA.s 			page 50


     /tmp/ccs4yEhA.s:523    .text:00000000000002cc .LFE27
     /tmp/ccs4yEhA.s:4816   .debug_str:000000000000040a .LASF160
     /tmp/ccs4yEhA.s:4608   .debug_loc:000000000000008d .LLST5
     /tmp/ccs4yEhA.s:504    .text:00000000000002b8 .LBB17
     /tmp/ccs4yEhA.s:518    .text:00000000000002c8 .LBE17
     /tmp/ccs4yEhA.s:476    .text:0000000000000294 .LVL10
     /tmp/ccs4yEhA.s:4858   .debug_str:0000000000000529 .LASF161
     /tmp/ccs4yEhA.s:4688   .debug_str:000000000000008e .LASF162
     /tmp/ccs4yEhA.s:391    .text:0000000000000230 .LFB26
     /tmp/ccs4yEhA.s:425    .text:000000000000025c .LFE26
     /tmp/ccs4yEhA.s:4615   .debug_loc:00000000000000b0 .LLST4
     /tmp/ccs4yEhA.s:414    .text:000000000000024c .LVL8
     /tmp/ccs4yEhA.s:4774   .debug_str:00000000000002f6 .LASF163
     /tmp/ccs4yEhA.s:4718   .debug_str:0000000000000161 .LASF164
     /tmp/ccs4yEhA.s:241    .text:0000000000000180 .LFB25
     /tmp/ccs4yEhA.s:275    .text:00000000000001ac .LFE25
     /tmp/ccs4yEhA.s:4622   .debug_loc:00000000000000d3 .LLST0
     /tmp/ccs4yEhA.s:264    .text:000000000000019c .LVL3
     /tmp/ccs4yEhA.s:4770   .debug_str:00000000000002d9 .LASF182
     /tmp/ccs4yEhA.s:9      .text:0000000000000000 .LFB24
     /tmp/ccs4yEhA.s:84     .text:00000000000000c8 .LFE24
     /tmp/ccs4yEhA.s:1022   .text:00000000000004f8 .LFB23
     /tmp/ccs4yEhA.s:1339   .text:00000000000006f8 .LFE23
     /tmp/ccs4yEhA.s:1062   .text:0000000000000534 .LBB23
     /tmp/ccs4yEhA.s:1106   .text:0000000000000568 .LBE23
     /tmp/ccs4yEhA.s:4650   .debug_ranges:0000000000000000 .Ldebug_ranges0
     /tmp/ccs4yEhA.s:4982   .debug_str:00000000000008fc .LASF165
     /tmp/ccs4yEhA.s:4629   .debug_loc:00000000000000f6 .LLST7
     /tmp/ccs4yEhA.s:1240   .text:0000000000000668 .LBB30
     /tmp/ccs4yEhA.s:1284   .text:0000000000000694 .LBE30
     /tmp/ccs4yEhA.s:1262   .text:0000000000000680 .LVL29
     /tmp/ccs4yEhA.s:1217   .text:0000000000000650 .LVL28
     /tmp/ccs4yEhA.s:1295   .text:00000000000006a0 .LVL31
     /tmp/ccs4yEhA.s:1310   .text:00000000000006c0 .LVL32
     /tmp/ccs4yEhA.s:1331   .text:00000000000006f4 .LVL33
     /tmp/ccs4yEhA.s:1125   .text:0000000000000584 .LVL22
     /tmp/ccs4yEhA.s:1168   .text:00000000000005e0 .LVL23
     /tmp/ccs4yEhA.s:1177   .text:00000000000005f8 .LVL24
     /tmp/ccs4yEhA.s:1182   .text:0000000000000608 .LVL25
     /tmp/ccs4yEhA.s:1191   .text:0000000000000620 .LVL26
     /tmp/ccs4yEhA.s:4756   .debug_str:0000000000000256 .LASF183
     /tmp/ccs4yEhA.s:4780   .debug_str:0000000000000316 .LASF184
     /tmp/ccs4yEhA.s:4828   .debug_str:0000000000000457 .LASF166
     /tmp/ccs4yEhA.s:4892   .debug_str:00000000000005fe .LASF167
     /tmp/ccs4yEhA.s:4720   .debug_str:0000000000000171 .LASF168
     /tmp/ccs4yEhA.s:5016   .debug_str:0000000000000a01 .LASF169
     /tmp/ccs4yEhA.s:4722   .debug_str:0000000000000184 .LASF170
     /tmp/ccs4yEhA.s:4888   .debug_str:00000000000005e9 .LASF171
     /tmp/ccs4yEhA.s:838    .text:0000000000000438 .LVL16
     /tmp/ccs4yEhA.s:843    .text:000000000000043c .LVL17
     /tmp/ccs4yEhA.s:316    .text:00000000000001d8 .LVL4
     /tmp/ccs4yEhA.s:334    .text:00000000000001f4 .LVL6
     /tmp/ccs4yEhA.s:461    .text:000000000000027c .LVL9
     /tmp/ccs4yEhA.s:409    .text:0000000000000244 .LVL7
     /tmp/ccs4yEhA.s:259    .text:0000000000000194 .LVL2
     /tmp/ccs4yEhA.s:1206   .text:0000000000000630 .LVL27
     /tmp/ccs4yEhA.s:1286   .text:0000000000000698 .LVL30
GAS LISTING /tmp/ccs4yEhA.s 			page 51


     /tmp/ccs4yEhA.s:1366   .debug_info:0000000000000000 .Ldebug_info0
     /tmp/ccs4yEhA.s:1291   .text:0000000000000698 .LBB26
     /tmp/ccs4yEhA.s:1311   .text:00000000000006c0 .LBE26
     /tmp/ccs4yEhA.s:1314   .text:00000000000006c4 .LBB27
     /tmp/ccs4yEhA.s:1334   .text:00000000000006f8 .LBE27
     /tmp/ccs4yEhA.s:1204   .text:0000000000000630 .LBB28
     /tmp/ccs4yEhA.s:1235   .text:0000000000000664 .LBE28
     /tmp/ccs4yEhA.s:1238   .text:0000000000000668 .LBB32
     /tmp/ccs4yEhA.s:1289   .text:0000000000000698 .LBE32

UNDEFINED SYMBOLS
_ZN3Nit7runningE
_ZN3Nit8dispatchEv
_ZN8Memorija9alokacijaEm
_ZN8Memorija12oslobadjanjeEPv
_ZN3Nit11konstruktorEPFvPvES0_
_ZN3Nit4joinEv
_ZN7Semafor5closeEv
_ZN7Semafor4waitEv
_ZN7Semafor6signalEv
_ZN9Scheduler11threadsleepEi
_ZN7Konzola7getulazEv
_ZN7Konzola8putizlazEi
_Z11printStringPKc
_Z8printIntiii
_ZN3Nit6tajmerE
_ZN9Scheduler13dekremntacijaEi
plic_claim
plic_complete
CONSOLE_STATUS
CONSOLE_RX_DATA
_ZN7Konzola7putulazEi
